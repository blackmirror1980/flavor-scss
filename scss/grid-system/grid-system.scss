@charset 'UTF-8';

@mixin columns-sizes($columns: $columns-default, $gutter: $gutter-default, $key: '') {
  // Columns Sizes
  // --------------------------------------------------
  @for $i from 0 through $columns {
    @if ($i==0) {
      .col-#{$key}-push-0 {
        left: auto;
      }

      .col-#{$key}-pull-0 {
        right: auto;
      }
    }
    @else {
      $col-percentage: percentage($i / $columns);

      .col-#{$key}-#{$i} {
        width: $col-percentage;
      }

      .col-#{$key}-push-#{$i} {
        left: $col-percentage;
      }

      .col-#{$key}-pull-#{$i} {
        right: $col-percentage;
      }

      .col-#{$key}-offset-#{$i} {
        margin-left: $col-percentage;
      }
    }
  }
}

@mixin columns-breakpoints($breakpoints: $columns-breakpoints, $columns: $columns-default, $gutter: $gutter-default, $first-breakpoint: $first-column-breakpoint-default) {
  // Columns Breakpoints
  // --------------------------------------------------
  @each $key, $breakpoint in $breakpoints {
    @if ($breakpoint==$first-breakpoint) {
      @include columns-sizes($columns, $gutter, $key);
    }
    @else {
      @include media($breakpoint) {
        @include columns-sizes($columns, $gutter, $key);
      }
    }
  }
}

@mixin columns($columns: $columns-default, $gutter: $gutter-default) {
  // Columns
  // --------------------------------------------------
  // Common styles for small and large grid columns
  [class*='col-'] {
    @include position(relative);
    @include display(inline-block);
    @include padding(null $padding-right null $padding-right);

    min-height: 1px; // Prevent columns from collapsing when empty
  }

  @include columns-breakpoints($columns-breakpoints, $columns, $gutter, $first-column-breakpoint-default);
}

@mixin rows($gutter: $gutter-default) {
  // Rows
  // --------------------------------------------------
  $margin-left: ($gutter / -2);
  $margin-right: ($gutter / -2);

  .row {
    // Row
    //
    // Rows contain and clear the floats of your columns.
    @include display(block);
    @include margin(0 $margin-right 0 $margin-left);
    @include reset-inline-block;

    + .row {
      @include margin($gutter null null null);
    }
  }
}

@mixin container-breakpoints($breakpoints: $common-breakpoints, $gutter: $gutter-default) {
  // Containers Breakpoints
  // --------------------------------------------------
  @each $key, $breakpoint in $breakpoints {
    @include media($breakpoint) {
      @include box-size(($breakpoint - $gutter) auto);
    }
  }
}

@mixin containers($gutter: $gutter-default) {
  // Containers
  // --------------------------------------------------
  $padding-left: ($gutter / 2);
  $padding-right: ($gutter / 2);

  %container-base {
    // container-base
    @include display(block);
    @include box-size(100% auto);
    @include padding(0 $padding-right 0 $padding-left);
    @include margin(0 auto);
  }

  [class*='container'] {
    // Container widths
    //
    // Set the container width, and override it for fixed navbars in media queries.
    @extend %container-base;

    + [class*='container'] {
      @include margin($gutter null null null);
    }

    &:not([class*='-fluid']) {
      @include container-breakpoints($common-breakpoints, $gutter);
    }
  }
}

@mixin grid-system($columns: $columns-default, $gutter: $gutter-default) {
  // Grid system
  // --------------------------------------------------
  @include containers($gutter);
  @include rows($gutter);
  @include columns($columns, $gutter);
}
