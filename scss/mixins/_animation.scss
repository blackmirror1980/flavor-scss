@charset 'UTF-8';

////
/// Flavor SCSS Mixins Animation
/// @group mixins-animation
/// @author blackmirror1980
////

/// Animation name modes supported
///
/// @type list
/// @access private
$animation-name-modes: array-concat((none), $css-default-modes);

/// Checks if animation name is string or animation-name-mode (none, inherit, initial)
///
/// @access public
/// @param {string} $an - the animation name
/// @link https://www.w3schools.com/cssref/css3_pr_animation-name.asp W3Schools animation-name docs
/// @return {boolean}
@function is-animation-name($an) {
  @return is-string($an) or array-contains($animation-name-modes, $an);
}

/// Checks if animation time is a correct time value
///
/// @access public
/// @param {string} $at - the animation time
/// @link https://www.w3schools.com/cssref/css3_pr_animation-duration.asp W3Schools animation-duration docs
/// @return {boolean}
@function is-animation-time($at) {
  @return is-time($at) or is-css-default($at);
}

/// Animation direction modes supported
///
/// @type list
/// @access private
$animation-direction-modes: array-concat((normal, reverse, alternate, alternate-reverse), $css-default-modes);

/// Checks if animation direction is a correct direction value
///
/// @access public
/// @param {string} $ad - the animation direction
/// @link https://www.w3schools.com/cssref/css3_pr_animation-direction.asp W3Schools animation-direction docs
/// @return {boolean}
@function is-animation-direction($ad) {
  @return is-defined($ad) and array-contains($animation-direction-modes, $ad);
}

/// Animation iteration count modes supported
///
/// @type list
/// @access private
$animation-iteration-count-modes: array-concat((infinite), $css-default-modes);

/// Checks if animation iteration count is a correct iteration count value (integer or infinite, initial, inherit)
///
/// @access public
/// @param {string} $aic - the animation iteration count
/// @link https://www.w3schools.com/cssref/css3_pr_animation-iteration-count.asp W3Schools animation-iteration-count docs
/// @return {boolean}
@function is-animation-iteration-count($aic) {
  @return is-integer($aic) or array-contains($animation-iteration-count-modes, $aic);
}

/// Animation fill modes supported
///
/// @type list
/// @access private
$animation-fill-modes: array-concat((none, forwards, backwards, both), $css-default-modes);

/// Checks if animation fill mode is a correct fill mode value (integer or none, forwards, backwards, both, initial, inherit)
///
/// @access public
/// @param {string} $afm - the animation fill mode
/// @link https://www.w3schools.com/cssref/css3_pr_animation-fill-mode.asp W3Schools animation-fill-mode docs
/// @return {boolean}
@function is-animation-fill-mode($afm) {
  @return is-defined($afm) and array-contains($animation-fill-modes, $afm);
}

/// Animation timing function modes supported
///
/// @type list
/// @access private
$animation-timing-function-modes: array-concat((linear, ease, ease-in, ease-out, ease-in-out, step-start, step-end), $css-default-modes);

/// Checks if animation timing function mode is a correct timing function (steps(), cubid-bezier(), linear, ease, ease-in, ease-out, ease-in-out, step-start, step-end, initial, inherit)
///
/// @access public
/// @param {string} $atf - the animation timing function
/// @link https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp W3Schools animation-timing-function docs
/// @return {boolean}
@function is-animation-timing-function($atf) {
  @return is-defined($atf) and (string-starts-with($atf, 'steps') or string-starts-with($atf, 'cubic-bezier') or array-contains($animation-timing-function-modes, $atf));
}

/// Animation play state supported
///
/// @type list
/// @access private
$animation-play-state-modes: array-concat((paused, running), $css-default-modes);

/// Checks if animation play state is a correct play state value (paused, running, initial, inherit)
///
/// @access public
/// @param {string} $aps - the animation play state
/// @link https://www.w3schools.com/cssref/css3_pr_animation-play-state.asp W3Schools animation-play-state docs
/// @return {boolean}
@function is-animation-play-state-modes($aps) {
  @return is-defined($aps) and array-contains($animation-play-state-modess, $aps);
}

/// Keyframe Mixin
///
/// @access public
/// @param {string} $animation-name - the animation name
/// @example scss - Usage - Fade Out
///   @include keyframe(fade-out) {
///     0% {
///       opacity: 1;
///     }
///     100% {
///       opacity: 0;
///     }
///   }
///
/// @example css - Output - Fade Out
///   @-webkit-keyframes fade-out {
///     0% {
///       opacity: 1;
///     }
///     100% {
///       opacity: 0;
///     }
///   }
///
///   @-moz-keyframes fade-out {
///     0% {
///       opacity: 1;
///     }
///     100% {
///       opacity: 0;
///     }
///   }
///
///   @-ms-keyframes fade-out {
///     0% {
///       opacity: 1;
///     }
///     100% {
///       opacity: 0;
///     }
///   }
///
///   @-o-keyframes fade-out {
///     0% {
///       opacity: 1;
///     }
///     100% {
///       opacity: 0;
///     }
///   }
///
///   @keyframes fade-out {
///     0% {
///       opacity: 1;
///     }
///     100% {
///       opacity: 0;
///     }
///   }
///
/// @example scss - Usage - Change Color
///   @include keyframe(change-color) {
///     0% {
///       color: #000;
///     }
///     100% {
///       color: #FFF;
///     }
///   }
///
/// @example css - Output - Change Color
///   @-webkit-keyframes change-color {
///     0% {
///       color: #000;
///     }
///     100% {
///       color: #FFF;
///     }
///   }
///
///   @-moz-keyframes change-color {
///     0% {
///       color: #000;
///     }
///     100% {
///       color: #FFF;
///     }
///   }
///
///   @-ms-keyframes change-color {
///     0% {
///       color: #000;
///     }
///     100% {
///       color: #FFF;
///     }
///   }
///
///   @-o-keyframes change-color {
///     0% {
///       color: #000;
///     }
///     100% {
///       color: #FFF;
///     }
///   }
///
///   @keyframes change-color {
///     0% {
///       color: #000;
///     }
///     100% {
///       color: #FFF;
///     }
///   }
@mixin keyframe($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }

  @-moz-keyframes #{$animation-name} {
    @content;
  }

  @-ms-keyframes #{$animation-name} {
    @content;
  }

  @-o-keyframes #{$animation-name} {
    @content;
  }

  @keyframes #{$animation-name} {
    @content;
  }
}

/// Animation Mixin
///
/// @access public
/// @param {object | map} $options - animation options
/// @param {string | animation-name-mode} $options.name [none] - animation name
/// @param {time} $options.duration [0s] - animation duration
/// @param {time} $options.delay [0s] - animation delay
/// @param {string} $options.direction [normal] - animation direction
/// @param {integer} $options.iteration-count [0] - animation iteration count
/// @param {string} $options.timing-function [ease] - animation timing function (easing)
/// @param {string} $options.fill-mode [forwards] - animation fill mode
/// @param {string} $options.play-state [initial] - animation play state
/// @requires {function} is-defined
/// @requires {function} is-animation-time
/// @requires {mixin} prefixer
/// @example scss - Usage
///   .animated-element {
///     @include animation(change-color 10s 5s);
///   }
///
/// @example css - Output
///   .animated-element {
///     -webkit-animation-name: change-color;
///     -moz-animation-name: change-color;
///     -ms-animation-name: change-color;
///     -o-animation-name: change-color;
///     animation-name: change-color;
///
///     -webkit-animation-duration: 10s;
///     -moz-animation-duration: 10s;
///     -ms-animation-duration: 10s;
///     -o-animation-duration: 10s;
///     animation-duration: 10s;
///
///     -webkit-animation-delay: 5s;
///     -moz-animation-delay: 5s;
///     -ms-animation-delay: 5s;
///     -o-animation-delay: 5s;
///     animation-delay: 5s;
///
///     -webkit-animation-direction: normal;
///     -moz-animation-direction: normal;
///     -ms-animation-direction: normal;
///     -o-animation-direction: normal;
///     animation-direction: normal;
///
///     -webkit-animation-iteration-count: 0;
///     -moz-animation-iteration-count: 0;
///     -ms-animation-iteration-count: 0;
///     -o-animation-iteration-count: 0;
///     animation-iteration-count: 0;
///
///     -webkit-animation-timing-function: ease;
///     -moz-animation-timing-function: ease;
///     -ms-animation-timing-function: ease;
///     -o-animation-timing-function: ease;
///     animation-timing-function: ease;
///
///     -webkit-animation-fill-mode: forwards;
///     -moz-animation-fill-mode: forwards;
///     -ms-animation-fill-mode: forwards;
///     -o-animation-fill-mode: forwards;
///     animation-fill-mode: forwards;
///
///     -webkit-animation-play-state: initial;
///     -moz-animation-play-state: initial;
///     -ms-animation-play-state: initial;
///     -o-animation-play-state: initial;
///     animation-play-state: initial;
///   }
@mixin animation($options) {
  @if is-css-default($options) {
    @include prefixer(animation, $options);
  }
  @else {
    $settings: (name: none, duration: 0s, delay: 0s, direction: normal, iteration-count: 0, timing-function: ease, fill-mode: forwards, play-state: initial);

    @if is-object($options) {
      $settings: extend($settings, $options);
    }
    @else {
      $name: if(length($options) > 0, nth($options, 1), null);

      @if is-defined($name) {
        $settings: map-merge($settings, (name: $name));
      }

      $duration: if(length($options) > 1, nth($options, 2), null);

      @if is-defined($duration) {
        $settings: map-merge($settings, (duration: $duration));
      }

      $delay: if(length($options) > 2, nth($options, 3), null);

      @if is-defined($delay) {
        $settings: map-merge($settings, (delay: $delay));
      }

      $direction: if(length($options) > 3, nth($options, 4), null);

      @if is-defined($direction) {
        $settings: map-merge($settings, (direction: $direction));
      }

      $iteration-count: if(length($options) > 4, nth($options, 5), null);

      @if is-defined($iteration-count) {
        $settings: map-merge($settings, (iteration-count: $iteration-count));
      }

      $timing-function: if(length($options) > 5, nth($options, 6), null);

      @if is-defined($timing-function) {
        $settings: map-merge($settings, (timing-function: $timing-function));
      }

      $fill-mode: if(length($options) > 6, nth($options, 7), null);

      @if is-defined($fill-mode) {
        $settings: map-merge($settings, (fill-mode: $fill-mode));
      }

      $play-state: if(length($options) > 7, nth($options, 8), null);

      @if is-defined($play-state) {
        $settings: map-merge($settings, (play-state: $play-state));
      }
    }

    $animation: ();

    $animation-name: map-get($settings, name);

    @if is-animation-name($animation-name) {
      @include prefixer(animation-name, $animation-name);
    }
    @else {
      @error '`animation-name: #{$animation-name}` is mandatory parameter';
    }

    $animation-duration: map-get($settings, duration);

    @if is-animation-time($animation-duration) {
      @include prefixer(animation-duration, $animation-duration);
    }
    @else {
      @warn '`animation-duration: #{$animation-duration}` is not a valid animation time value (only time & css defaults are allowed)';
    }

    $animation-delay: map-get($settings, delay);

    @if is-animation-time($animation-delay) {
      @include prefixer(animation-delay, $animation-delay);
    }
    @else {
      @warn '`animation-delay: #{$animation-delay}` is not a valid animation time value (only time & css defaults are allowed)';
    }

    $animation-direction: map-get($settings, direction);

    @if is-animation-direction($animation-direction) {
      @include prefixer(animation-direction, $animation-direction);
    }
    @else {
      @warn '`animation-direction: #{$animation-direction}` is not a valid animation direction value';
    }

    $animation-iteration-count: map-get($settings, iteration-count);

    @if is-animation-iteration-count($animation-iteration-count) {
      @include prefixer(animation-iteration-count, $animation-iteration-count);
    }
    @else {
      @warn '`animation-iteration-count: #{$animation-iteration-count}` is not a valid animation iteration count value';
    }

    $animation-timing-function: map-get($settings, timing-function);

    @if is-animation-timing-function($animation-timing-function) {
      @include prefixer(animation-timing-function, $animation-timing-function);
    }
    @else {
      @warn '`animation-timing-function: #{$animation-timing-function}` is not a valid animation timing function value';
    }

    $animation-fill-mode: map-get($settings, fill-mode);

    @if is-animation-fill-mode($animation-fill-mode) {
      @include prefixer(animation-fill-mode, $animation-fill-mode);
    }
    @else {
      @warn '`animation-fill-mode: #{$animation-fill-mode}` is not a valid animation fill mode value';
    }

    $animation-play-state: map-get($settings, play-state);

    @if is-animation-direction($animation-play-state) {
      @include prefixer(animation-play-state, $animation-play-state);
    }
    @else {
      @warn '`animation-play-state: #{$animation-play-state}` is not a valid animation play state value';
    }
  }
}
