@function contains($list, $item) {
  @if is-array($list) and is-defined($item) {
    $index-of: index($list, $item);

    @return is-defined($index-of) and $index-of > 0;
  }

  @warn '`array: #{$list}` and `item: #{$item}` are not valid data for array contains';
  @return false;
}

@function array-append($list1, $list2) {
  $list: ();

  @if is-array($list1) {
    @each $item in $list1 {
      $list: append($list, $item);
    }
  }
  @else {
    $list: append($list, $list1);
  }

  @if is-array($list2) {
    @each $item in $list2 {
      $list: append($list, $item);
    }
  }
  @else {
    $list: append($list, $list2);
  }

  @return $list;
}

$css-default-modes: (initial, inherit);

@function is-css-default($cd) {
  @return contains($css-default-modes, $cd);
}

@function is-css-size($cs) {
  @return is-defined($cs) and (is-size($cs) or contains($css-default-modes, $cs));
}

$color-modes: array-append((transparent), $css-default-modes);

@function is-css-color($c) {
  @return is-color($c) or contains($color-modes, $c);
}

@function string-starts-with($h, $n) {
  @if is-string($h) and is-string($n) {
    @return str-slice($h, 1, str-length($n))==$n;
  }

  @warn '`haystack: #{$h}` and `needle: #{$n}` are not valid strings';
  @return false;
}

@function string-contains($h, $n) {
  @if is-string($h) and is-string($n) {
    @return str-index($h, $n) > 0;
  }

  @warn '`haystack: #{$h}` and `needle: #{$n}` are not valid strings';
  @return false;
}

@function string-ends-with($h, $n) {
  @if is-string($h) and is-string($n) {
    $h-length: str-length($h);
    $n-length: str-length($n);

    @return str-slice($h, $h-length - $n-length, $n-length)==$n;
  }

  @warn '`haystack: #{$h}` and `needle: #{$n}` are not valid strings';
  @return false;
}

@function is-url($u) {
  @if is-string($u) {
    $url: $u;

    @if string-starts-with($u, 'url(') and string-ends-with($u, ')') {
      $url: str-slice($u, 5, str-length($u) - 1);
    }

    @if string-starts-with($url, '../') or string-starts-with($url, '/') or string-starts-with($url, 'http') {
      @return true;
    }
  }

  @return false;
}

@function inspect-url($u) {
  @if is-url($u) {
    $url: $u;

    @if not string-starts-with($u, 'url(') and not string-ends-with($u, ')') {
      $url: url('#{$u}');
    }

    @return $url;
  }

  @return false;
}
