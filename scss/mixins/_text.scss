@charset 'UTF-8';

////
/// Flavor SCSS Mixins Text
/// @group mixins-text
/// @author blackmirror1980
////

/// Font size modes
///
/// @access private
/// @requires {function} array-concat
/// @type list
$font-size-modes: array-concat((medium, xx-small, x-small, small, large, x-large, xx-large, smaller, larger), $css-default-modes);

/// Checks if something is a supported font-size value
///
/// @link https://www.w3schools.com/cssref/pr_font_font-size.asp - W3Schools font-size docs
/// @access public
/// @param {size | percentage | font-size-mode} $fs - the font-size value
/// @return {boolean} - true if is font-size value
@function is-font-size($fs) {
  @return is-defined($fs) and (is-size($fs) or is-percentage($fs) or array-contains($font-size-modes, $fs));
}

/// Font size mixin
///
/// @example scss - Usage
///   .font-size-element {
///     @include font-size(1.8rem);
///   }
///
/// @example css - Output
///   .font-size-element {
///     font-size: 1.8rem;
///   }
/// @access public
/// @param {size | percentage | font-size-mode} $fs - the font-size value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin font-size($fs, $important: false) {
  @if is-font-size($fs) {
    font-size: $fs important($important);
  }
  @else {
    @warn '`font-size: #{$fs}` is not a valid font-size value';
  }
}

/// Line height modes
///
/// @access private
/// @type list
$line-height-modes: array-concat((normal), $css-default-modes);

/// Checks if something is a supported line-height value
///
/// @link https://www.w3schools.com/cssref/pr_dim_line-height.asp - W3Schools line-height docs
/// @access public
/// @param {size | percentage | line-height-mode} $lh - the line-height value
/// @return {boolean} - true if is line-height value
@function is-line-height($lh) {
  @return is-defined($lh) and (is-size($lh) or is-percentage($lh) or array-contains($line-height-modes, $lh));
}

/// Line height mixin
///
/// @example scss - Usage
///   .line-height-element {
///     @include line-height(2.5rem);
///   }
///
/// @example css - Output
///   .line-height-element {
///     line-height: 2.5rem;
///   }
/// @access public
/// @param {size | percentage | line-height-mode} $lh - the line-height value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin line-height($lh, $important: false) {
  @if is-line-height($lh) {
    line-height: $lh important($important);
  }
  @else {
    @warn '`line-height: #{$lh}` is not a valid line-height value';
  }
}

/// Checks if something is a supported font-family value
///
/// @link https://www.w3schools.com/cssref/pr_font_font-family.asp - W3Schools font-family docs
/// @access public
/// @param {string | array | list} $ff - the font-family value
/// @return {boolean} - true if is font-family value
@function is-font-family($ff) {
  @return is-defined($ff) and (is-string($ff) or is-array($ff));
}

/// Font family mixin
///
/// @example scss - Usage
///   .font-family-element {
///     @include font-family('Source Sans Pro');
///   }
///
/// @example css - Output
///   .font-family-element {
///     font-family: 'Source Sans Pro';
///   }
///
/// @example scss - Usage
///   .font-family-element {
///     @include font-family('Source Sans Pro', Verdana, sans-serif);
///   }
///
/// @example css - Output
///   .font-family-element {
///     font-family: 'Source Sans Pro', Verdana, sans-serif;
///   }
/// @access public
/// @param {string | array | list} $ff - the font-family value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin font-family($ff, $important: false) {
  @if is-font-family($ff) {
    font-family: #{$ff} important($important);
  }
  @else {
    @warn '`font-family: #{$ff}` is not a valid font-family value';
  }
}

/// Font weight modes
///
/// @access private
/// @type list
$font-weight-modes: array-concat((normal, bold, bolder, lighter, 100, 200, 300, 400, 500, 600, 700, 800, 900), $css-default-modes);

/// Checks if something is a supported font-weight value
///
/// @link https://www.w3schools.com/cssref/pr_font_weight.asp - W3Schools font-weight docs
/// @access public
/// @param {string | integer} $fw - the font-weight value
/// @return {boolean} - true if is font-weight value
@function is-font-weight($fw) {
  @return is-defined($fw) and array-contains($font-weight-modes, $fw);
}

/// Font weight mixin
///
/// @example scss - Usage
///   .font-weight-element {
///     @include font-weight(bold);
///   }
///
/// @example css - Output
///   .font-weight-element {
///     font-weight: bold;
///   }
/// @access public
/// @param {string | integer} $fw - the font-weight value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin font-weight($fw, $important: false) {
  @if is-font-weight($fw) {
    font-weight: $fw important($important);
  }
  @else {
    @warn '`font-weight: #{$fw}` is not a valid font-weight';
  }
}

/// Font style modes
///
/// @access private
/// @requires {function} array-concat
/// @type list
$font-style-modes: array-concat((normal, italic, oblique), $css-default-modes);

/// Checks if something is a supported font-style value
///
/// @link https://www.w3schools.com/cssref/pr_font_font-style.asp - W3Schools font-style docs
/// @access public
/// @param {font-style-mode} $fs - the font-style value
/// @return {boolean} - true, if it's actually a font style value
@function is-font-style($fs) {
  @return is-defined($fs) and array-contains($font-style-modes, $fs);
}

/// Font size mixin
///
/// @example scss - Usage
///   .font-style-element {
///     @include font-style(italic);
///   }
///
/// @example css - Output
///   .font-style-element {
///     font-style: italic;
///   }
/// @access public
/// @param {font-style-mode} $fs - the font-style value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin font-style($fs, $important: false) {
  @if is-font-style($fs) {
    font-style: $fs important($important);
  }
  @else {
    @warn '`font-style: #{$fs}` is not a valid font-style value';
  }
}

/// Font mixin
///
/// @example scss - Usage
///
///   $font-family: OpenSans, Verdana, sans-serif;
///
///   .font-element {
///     @include font(1.5rem 2.5rem $font-family bold italic white);
///   }
///
/// @example css - Output
///   .font-element {
///     font-size: 1.5rem;
///     line-height: 2.5rem;
///     font-family: OpenSans, Verdana, sans-serif;
///     font-weight: bold;
///     font-style: italic;
///     color: white;
///   }
/// @requires {function} extend
/// @requires {function} is-defined
/// @requires {function} is-object
/// @requires {function} nth-value
/// @access public
/// @param {object | map} $options - the options
/// @param {size | percentage | font-size-mode} $options.size [1rem] - the font-size value
/// @param {size | percentage | line-height-mode} $options.height [1rem] - the line-height value
/// @param {string | array | list} $options.family [null] - the font-family value
/// @param {string | integer} $options.weight [normal] - the font-weight value
/// @param {font-style-mode} $options.style [normal] - the font-style value
/// @param {color} $options.color [null] - the color value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin font($options, $important: false) {
  $settings: (size: 1rem, height: 1rem, family: null, weight: normal, style: normal, color: null);

  @if is-object($options) {
    $settings: extend($settings, $options);
  }
  @else {
    $size: nth-value($options, 1);

    @if is-defined($size) {
      $settings: extend($settings, (size: $size));
    }

    $height: nth-value($options, 2);

    @if is-defined($height) {
      $settings: extend($settings, (height: $height));
    }

    $family: nth-value($options, 3);

    @if is-defined($family) {
      $settings: extend($settings, (family: $family));
    }

    $weight: nth-value($options, 4);

    @if is-defined($weight) {
      $settings: extend($settings, (weight: $weight));
    }

    $style: nth-value($options, 5);

    @if is-defined($style) {
      $settings: extend($settings, (style: $style));
    }

    $color: nth-value($options, 6);

    @if is-defined($color) {
      $settings: extend($settings, (color: $color));
    }
  }

  $font-size: map-get($settings, size);

  @if is-defined($font-size) {
    @include font-size($font-size, $important);
  }

  $line-height: map-get($settings, height);

  @if is-defined($line-height) {
    @include line-height($line-height, $important);
  }

  $font-family: map-get($settings, family);

  @if is-defined($font-family) {
    @include font-family($font-family, $important);
  }

  $font-weight: map-get($settings, weight);

  @if is-defined($font-weight) {
    @include font-weight($font-weight, $important);
  }

  $font-style: map-get($settings, style);

  @if is-defined($font-style) {
    @include font-style($font-style, $important);
  }

  $font-color: map-get($settings, color);

  @if is-defined($font-color) {
    @include box-color($font-color null, $important);
  }
}

/// Text align modes
///
/// @access private
/// @type list
$text-align-modes: array-concat((left, center, right, justify), $css-default-modes);

/// Checks if something is a supported text-align value
///
/// @link https://www.w3schools.com/cssref/pr_text_text-align.asp - W3Schools text-align docs
/// @access public
/// @param {string} $ta - the text-align value
/// @return {boolean} - true if is text-align value
@function is-text-align($ta) {
  @return is-defined($ta) and array-contains($text-align-modes, $ta);
}

/// Text align mixin
///
/// @example scss - Usage
///   .text-align-element {
///     @include text-align(center);
///   }
///
/// @example css - Output
///   .text-align-element {
///     text-align: center;
///   }
/// @access public
/// @param {string} $ta - the text-align value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin text-align($ta, $important: false) {
  @if(is-text-align($ta)) {
    text-align: $ta important($important);
  }
  @else {
    @warn '`text-align: #{$ta}` is not a valid text-align value';
  }
}

/// Vertical align modes
///
/// @access private
/// @type list
$vertical-align-modes: array-concat((baseline, sub, super, top, text-top, middle, bottom, text-bottom), $css-default-modes);

/// Checks if something is a supported vertical-align value
///
/// @link https://www.w3schools.com/cssref/pr_pos_vertical-align.asp - W3Schools vertical-align docs
/// @access public
/// @param {string} $va - the vertical-align value
/// @return {boolean} - true if is vertical-align value
@function is-vertical-align($va) {
  @return is-defined($va) and (is-size($va) or array-contains($vertical-align-modes, $va));
}

/// Vertical align mixin
///
/// @example scss - Usage
///   .vertical-align-element {
///     @include vertical-align(top);
///   }
///
/// @example css - Output
///   .vertical-align-element {
///     vertical-align: top;
///   }
/// @access public
/// @param {string} $va - the vertical-align value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin vertical-align($va, $important: false) {
  @if(is-vertical-align($va)) {
    vertical-align: $va important($important);
  }
  @else {
    @warn '`vertical-align: #{$va}` is not a valid vertical-align value';
  }
}

/// Content align mixin
///
/// @example scss - Usage
///   .content-align-element {
///     @include content-align(center middle);
///   }
///
/// @example css - Output
///   .content-align-element {
///     text-align: center;
///     vertical-align: middle;
///   }
/// @access public
/// @param {object | map} $options - the content-align options value
/// @param {string} $options.h [inherit] - the text-align value
/// @param {string} $options.v [inherit] - the vertical-align value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin content-align($options, $important: false) {
  $settings: (h: inherit, v: inherit);

  @if is-object($options) {
    $settings: extend($settings, $options);
  }
  @else {
    $h: nth-value($options, 1);

    @if is-defined($h) {
      $settings: extend($settings, (h: $h));
    }

    $v: nth-value($options, 2);

    @if is-defined($v) {
      $settings: extend($settings, (v: $v));
    }
  }

  $h: get($settings, h);

  @if is-defined($h) {
    @include text-align($h, $important);
  }

  $v: get($settings, v);

  @if is-defined($v) {
    @include vertical-align($v, $important);
  }
}

/// Text transform modes
///
/// @access private
/// @type list
$text-transform-modes: array-concat((none, capitalize, uppercase, lowercase), $css-default-modes);

/// Checks if something is a supported text-transform value
///
/// @link https://www.w3schools.com/cssref/pr_text_text-transform.asp - W3Schools text-transform docs
/// @access public
/// @param {string} $tt - the text-transform value
/// @return {boolean} - true if is text-transform value
@function is-text-transform($tt) {
  @return is-defined($tt) and array-contains($text-transform-modes, $tt);
}

/// Text transform mixin
///
/// @example scss - Usage
///   .text-transform-element {
///     @include text-transform(uppercase);
///   }
///
/// @example css - Output
///   .text-transform-element {
///     text-transform: uppercase;
///   }
/// @access public
/// @param {string} $tt - the text-transform value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin text-transform($tt, $important: false) {
  @if is-text-transform($tt) {
    text-transform: $tt important($important);
  }
  @else {
    @warn '`text-transform: #{$tt}` is not a valid text-transform value';
  }
}

/// Text overflow modes
///
/// @access private
/// @type list
$text-overflow-modes: array-concat((clip, ellipsis), $css-default-modes);

/// Checks if something is a supported text-overflow mode
///
/// @link https://www.w3schools.com/cssref/css3_pr_text-overflow.asp - W3Schools text-overflow docs
/// @access public
/// @param {string} $to - the text-overflow mode
/// @return {boolean} - true if is text-overflow mode
@function is-text-overflow($to) {
  @return is-defined($to) and (array-contains($text-overflow-modes, $to) or is-string($to));
}

/// Text overflow mixin
///
/// @example scss - Usage
///   .text-overflow-element {
///     @include text-overflow(ellipsis);
///   }
///
/// @example css - Output
///   .text-overflow-element {
///     -o-overflow: ellipsis;
///     text-overflow: ellipsis;
///   }
/// @access public
/// @param {string} $to - the text-overflow value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin text-overflow($to, $important: false) {
  @if is-text-overflow($to) {
    @include prefixer(text-overflow, $to, o spec, $important);
  }
  @else {
    @warn '`text-overflow: #{$to}` is not a valid text-overflow value';
  }
}

/// Hyphens modes
///
/// @access private
/// @type list
$hyphens-modes: array-concat((none, manual, auto, unset), $css-default-modes);

/// Checks if something is a supported hyphens mode
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/hyphens - MDN hyphens docs
/// @access public
/// @param {string} $h - the hyphens mode
/// @return {boolean} - true if is hyphens mode
@function is-hyphens($h) {
  @return is-defined($h) and array-contains($hyphens-modes, $h);
}

/// Hyphens mixin
///
/// @example scss - Usage
///   .hyphens-element {
///     @include hyphens(manual);
///   }
///
/// @example css - Output
///   .hyphens-element {
///     -webkit-overflow: manual;
///     -moz-overflow: manual;
///     -ms-overflow: manual;
///     -o-overflow: manual;
///     hyphens: manual;
///   }
/// @access public
/// @param {string} $h - the hyphens value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin hyphens($h, $important: false) {
  @if is-hyphens($h) {
    @include prefixer(hyphens, $h, null, $important);
  }
  @else {
    @warn '`hyphens: #{$h}` is not a valid hyphens value';
  }
}

/// Letter spacing modes
///
/// @access private
/// @type list
$letter-spacing-modes: array-concat((normal), $css-default-modes);

/// Checks if something is a supported letter-spacing value
///
/// @link https://www.w3schools.com/cssref/pr_text_letter-spacing.asp - W3Schools letter-spacing docs
/// @access public
/// @param {size | string} $ls - the letter-spacing value
/// @return {boolean} - true if is letter-spacing value
@function is-letter-spacing($ls) {
  @return is-defined($ls) and (array-contains($letter-spacing-modes, $ls) or is-size($ls));
}

/// Letter spacing mixin
///
/// @example scss - Usage
///   .letter-spacing-element {
///     @include letter-spacing(3px);
///   }
///
/// @example css - Output
///   .letter-spacing-element {
///     letter-spacing: 3px;
///   }
/// @access public
/// @param {size | string} $ls - the letter-spacing value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin letter-spacing($ls, $important: false) {
  @if is-letter-spacing($ls) {
    letter-spacing: $ls important($important);
  }
  @else {
    @warn '`letter-spacing: #{$ls}` is not a valid letter-spacing value';
  }
}

/// Word spacing modes
///
/// @access private
/// @type list
$word-spacing-modes: array-concat((normal), $css-default-modes);

/// Checks if something is a supported word-spacing value
///
/// @link https://www.w3schools.com/cssref/pr_text_word-spacing.asp - W3Schools word-spacing docs
/// @access public
/// @param {size | string} $ws - the word-spacing value
/// @return {boolean} - true if is word-spacing value
@function is-word-spacing($ws) {
  @return is-defined($ws) and (array-contains($word-spacing-modes, $ws) or is-size($ws));
}

/// Word spacing mixin
///
/// @example scss - Usage
///   .word-spacing-element {
///     @include word-spacing(1rem);
///   }
///
/// @example css - Output
///   .word-spacing-element {
///     word-spacing: 1rem;
///   }
/// @access public
/// @param {size | string} $ws - the word-spacing value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin word-spacing($ws, $important: false) {
  @if is-word-spacing($ws) {
    word-spacing: $ws important($important);
  }
  @else {
    @warn '`word-spacing: #{$ws}` is not a valid word-spacing value';
  }
}

/// User select modes
///
/// @access private
/// @type list
$user-select-modes: (auto, none, text, all);

/// Checks if something is a supported user-select mode
///
/// @link https://www.w3schools.com/cssref/css3_pr_user-select.asp - W3Schools user-select docs
/// @access public
/// @param {string} $us - the user-select mode
/// @return {boolean} - true if is user-select mode
@function is-user-select($us) {
  @return is-defined($us) and array-contains($user-select-modes, $us);
}

/// User select mixin
///
/// @example scss - Usage
///   .user-select-element {
///     @include user-select(none);
///   }
///
/// @example css - Output
///   .user-select-element {
///     -webkit-user-select: none;
///     -moz-user-select: none;
///     -ms-user-select: none;
///     -o-user-select: none;
///     user-select: none;
///   }
/// @access public
/// @param {string} $us - the user-select value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin user-select($us, $important: false) {
  @if is-user-select($us) {
    @include prefixer(user-select, $us, null, $important);
  }
  @else {
    @warn '`user-select: #{$us}` is not a valid user-select value';
  }
}

/// Direction modes
///
/// @access private
/// @type list
$direction-modes: array-concat((ltr, rtl), $css-default-modes);

/// Checks if something is a supported direction mode
///
/// @link https://www.w3schools.com/cssref/pr_text_direction.asp - W3Schools direction docs
/// @access public
/// @param {string} $d - the direction mode
/// @return {boolean} - true if is direction mode
@function is-direction($d) {
  @return is-defined($d) and array-contains($direction-modes, $d);
}

/// Direction mixin
///
/// @example scss - Usage
///   .direction-element {
///     @include direction(rtl);
///   }
///
/// @example css - Output
///   .direction-element {
///     direction: rtl;
///   }
/// @access public
/// @param {string} $d - the direction value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin direction($d, $important: false) {
  @if is-direction($d) {
    direction: $d important($important);
  }
  @else {
    @warn '`direction: #{$d}` is not a valid direction value';
  }
}

/// White space modes
///
/// @access private
/// @type list
$white-space-modes: array-concat((normal, nowrap, pre, pre-line, pre-wrap), $css-default-modes);

/// Checks if something is a supported white-space mode
///
/// @link https://www.w3schools.com/cssref/pr_text_white-space.asp - W3Schools white-space docs
/// @access public
/// @param {string} $ws - the white-space mode
/// @return {boolean} - true if is white-space mode
@function is-white-space($ws) {
  @return is-defined($ws) and array-contains($white-space-modes, $ws);
}

/// White space mixin
///
/// @example scss - Usage
///   .white-space-element {
///     @include white-space(nowrap);
///   }
///
/// @example css - Output
///   .white-space-element {
///     white-space: nowrap;
///   }
/// @access public
/// @param {string} $ws - the white-space value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin white-space($ws, $important: false) {
  @if is-white-space($ws) {
    white-space: $ws important($important);
  }
  @else {
    @warn '`white-space: #{$ws}` is not a valid white-space value';
  }
}

/// Word break modes
///
/// @access private
/// @type list
$word-break-modes: array-concat((normal, break-all, keep-all), $css-default-modes);

/// Checks if something is a supported word-break mode
///
/// @link https://www.w3schools.com/cssref/css3_pr_word-break.asp - W3Schools word-break docs
/// @access public
/// @param {string} $wb - the word-break mode
/// @return {boolean} - true if is word-break mode
@function is-word-break($wb) {
  @return is-defined($wb) and array-contains($word-break-modes, $wb);
}

/// Word break mixin
///
/// @example scss - Usage
///   .word-break-element {
///     @include word-break(break-all);
///   }
///
/// @example css - Output
///   .word-break-element {
///     word-break: break-all;
///   }
/// @access public
/// @param {string} $wb - the word-break value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin word-break($wb, $important: false) {
  @if is-word-break($wb) {
    word-break: $wb important($important);
  }
  @else {
    @warn '`word-break: #{$wb}` is not a valid word-break value';
  }
}

/// Word wrap modes
///
/// @access private
/// @type list
$word-wrap-modes: array-concat((normal, break-word), $css-default-modes);

/// Checks if something is a supported word-wrap mode
///
/// @link https://www.w3schools.com/cssref/css3_pr_word-wrap.asp - W3Schools word-wrap docs
/// @access public
/// @param {string} $ww - the word-wrap mode
/// @return {boolean} - true if is word-wrap mode
@function is-word-wrap($ww) {
  @return is-defined($ww) and array-contains($word-wrap-modes, $ww);
}

/// Word wrap mixin
///
/// @example scss - Usage
///   .word-wrap-element {
///     @include word-wrap(break-word);
///   }
///
/// @example css - Output
///   .word-wrap-element {
///     word-wrap: break-word;
///   }
/// @access public
/// @param {string} $ww - the word-wrap value
/// @param {boolean} $force [false] - if true, will do proper hacks to force word-wrap
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin word-wrap($ww, $force: false, $important: false) {
  @if is-word-wrap($ww) {
    word-wrap: $ww important($important);
  }
  @else {
    @warn '`word-wrap: #{$ww}` is not a valid word-wrap value';
  }
}

/// Word Wrap Force mixin
///
/// @example scss - Usage - single line
///   .word-wrap-force-element {
///     @include word-wrap-force;
///   }
///
/// @example css - Output - single line
///   .word-wrap-force-element {
///     hyphens: auto;
///     word-break: break-all;
///     word-wrap: break-word;
///   }
/// @access public
@mixin word-wrap-force {
  @include hyphens(auto);
  @include word-break(break-all);
  @include word-wrap(break-word);
}

/// Text size adjust modes
///
/// @access private
/// @type list
$text-size-adjust-modes: array-concat((none, auto, unset), $css-default-modes);

/// Checks if something is a supported text-size-adjust value
///
/// @link https://developer.mozilla.org/it/docs/Web/CSS/text-size-adjust - MDN text-size-adjust docs
/// @access public
/// @param {percentage | string} $tsa - the text-size-adjust value
/// @return {boolean} - true if is text-size-adjust value
@function is-text-size-adjust($tsa) {
  @return is-defined($tsa) and (is-percentage($tsa) or array-contains($text-size-adjust-modes, $tsa));
}

/// Text size adjust mixin
///
/// @example scss - Usage
///   .text-size-adjust-element {
///     @include text-size-adjust(67%);
///   }
///
/// @example css - Output
///   .text-size-adjust-element {
///     -webkit-text-size-adjust: 67%;
///     -moz-text-size-adjust: 67%;
///     -ms-text-size-adjust: 67%;
///     -o-text-size-adjust: 67%;
///     text-size-adjust: 67%;
///   }
/// @access public
/// @param {string} $tsa - the text-size-adjust value
/// @param {array | list} $prefixes [$prefixes-default] - if true, will render the important rule
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin text-size-adjust($tsa, $prefixes: $prefixes-default, $important: false) {
  @if is-text-size-adjust($tsa) {
    @include prefixer(text-size-adjust, $tsa, $prefixes, $important);
  }
  @else {
    @warn '`text-size-adjust: #{$tsa}` is not a valid text-size-adjust value';
  }
}

/// Text shadow modes
///
/// @access private
/// @type list
$text-shadow-modes: array-concat((none), $css-default-modes);

/// Checks if something is text shadow mode
///
/// @access public
/// @param {string} $tsm - the text-shadow mode
/// @return {boolean} - true if is text-shadow mode
@function is-text-shadow-mode($tsm) {
  @return is-defined($tsm) and array-contains($text-shadow-modes, $tsm);
}

/// Checks if something is text shadow value
///
/// @access public
/// @param {any} $text-shadow - the text-shadow value
/// @return {boolean} - true if is text-shadow value
@function is-text-shadow($text-shadow) {
  @if is-defined($text-shadow) {
    @if is-text-shadow-mode($text-shadow) {
      @return true;
    }
    @else {
      // $defaults: (h-offset: 0, v-offset: 0, blur: 0, spread: 0, color: transparent, inset: null);
      // TODO: add spread & inset support when available
      $defaults: (h-offset: 0, v-offset: 0, blur: 0, color: transparent);

      @if is-object($text-shadow) {
        $text-shadow: extend($defaults, $text-shadow);
      }
      @else {
        $text-shadow-h-offset: nth-value($text-shadow, 1);
        $text-shadow-v-offset: nth-value($text-shadow, 2);
        $text-shadow-blur: nth-value($text-shadow, 3);
        $text-shadow-color: nth-value($text-shadow, 4);
        // $text-shadow-spread: nth-value($text-shadow, 4);
        // $text-shadow-color: nth-value($text-shadow, 5);
        // $text-shadow-inset: nth-value($text-shadow, 6);

        $text-shadow: extend($defaults, ());

        @if is-defined($text-shadow-h-offset) {
          $text-shadow: extend($text-shadow, (h-offset: $text-shadow-h-offset));
        }

        @if is-defined($text-shadow-v-offset) {
          $text-shadow: extend($text-shadow, (v-offset: $text-shadow-v-offset));
        }

        @if is-defined($text-shadow-blur) {
          $text-shadow: extend($text-shadow, (blur: $text-shadow-blur));
        }

        // @if is-defined($text-shadow-spread) {
        //   $text-shadow: extend($text-shadow, (spread: $text-shadow-spread));
        // }

        @if is-defined($text-shadow-color) {
          $text-shadow: extend($text-shadow, (color: $text-shadow-color));
        }

        // @if is-defined($text-shadow-inset) {
        //   $text-shadow: extend($text-shadow, (inset: $text-shadow-inset));
        // }
      }

      $is-text-shadow-valid: true;

      $text-shadow-h-offset: get($text-shadow, h-offset);

      @if not is-length($text-shadow-h-offset) {
        $is-text-shadow-valid: false;

        @warn '`text-shadow h-offset: #{$text-shadow-h-offset}` is not a valid css length value';
      }

      $text-shadow-v-offset: get($text-shadow, v-offset);

      @if $is-text-shadow-valid {
        @if not is-length($text-shadow-v-offset) {
          $is-text-shadow-valid: false;

          @warn '`text-shadow v-offset: #{$text-shadow-v-offset}` is not a valid css length value';
        }
      }

      $text-shadow-blur: get($text-shadow, blur);

      @if $is-text-shadow-valid {
        @if not is-length($text-shadow-blur) {
          $is-text-shadow-valid: false;

          @warn '`text-shadow blur: #{$text-shadow-blur}` is not a valid css length value';
        }
      }

      // $text-shadow-spread: get($text-shadow, spread);

      // @if $is-text-shadow-valid {
      //   @if not is-length($text-shadow-spread) {
      //     $is-text-shadow-valid: false;

      //     @warn '`text-shadow spread: #{$text-shadow-spread}` is not a valid css length value';
      //   }
      // }

      $text-shadow-color: get($text-shadow, color);

      @if $is-text-shadow-valid {
        @if not is-css-color($text-shadow-color) {
          $is-text-shadow-valid: false;

          @warn '`text-shadow color: #{$text-shadow-color}` is not a valid css color value';
        }
      }

      // $text-shadow-inset: get($text-shadow, inset);

      // @if $is-text-shadow-valid {
      //   @if is-string($text-shadow-inset) and $text-shadow-inset !=inset {
      //     $is-text-shadow-valid: false;

      //     @warn '`text-shadow inset: #{$text-shadow-inset}` is not a valid css inset value';
      //   }
      // }

      @return $is-text-shadow-valid;
    }
  }

  @return false;
}

/// Checks if a list is a text-shadow values list (e.g. `0 2px 0 #dcffa6, 0 2px 5px #000`)
///
/// @access public
/// @param {array | list} $text-shadows - the text-shadow values list
/// @return {boolean} - true if is text-shadow values list
@function is-text-shadows($text-shadows) {
  @if is-defined($text-shadows) {
    $is-text-shadows-valid: true;

    @each $text-shadow in $text-shadows {
      @if $is-text-shadows-valid {
        $is-text-shadows-valid: is-text-shadow($text-shadow);
      }
    }

    @return $is-text-shadows-valid;
  }

  @return false;
}

/// Text shadow mixin
///
/// @example scss - Usage
///   .text-shadow-element {
///     @include text-shadow(0 2px 0 #dcffa6, 0 2px 5px #000);
///   }
///
/// @example css - Output
///   .text-shadow-element {
///     -webkit-text-shadow: 0 2px 0 #dcffa6, 0 2px 5px #000;
///     -moz-text-shadow: 0 2px 0 #dcffa6, 0 2px 5px #000;
///     -ms-text-shadow: 0 2px 0 #dcffa6, 0 2px 5px #000;
///     -o-text-shadow: 0 2px 0 #dcffa6, 0 2px 5px #000;
///     text-shadow: 0 2px 0 #dcffa6, 0 2px 5px #000;
///   }
/// @access public
/// @param {shadow} $text-shadows... - the text shadows list
@mixin text-shadow($text-shadows...) {
  @if list-separator($text-shadows) != comma {
    $text-shadows: ($text-shadows,);
  }

  @if is-text-shadows($text-shadows) {
    @include prefixer(text-shadow, $text-shadows);
  }
  @else {
    @warn '`text-shadow: #{$text-shadows}` one or more are not valid css text-shadow values';
  }
}

/// Text stroke width modes
///
/// @access private
/// @requires {function} array-concat
/// @type list
$text-stroke-width-modes: array-concat((thin, medium, thick), $css-default-modes);

/// Checks if something is a supported text-stroke-width value
///
/// @access public
/// @param {size | text-stroke-width-mode} $tsw - the text-stroke-width value
/// @return {boolean} - true if is text-stroke-width value
@function is-text-stroke-width($tsw) {
  @return is-defined($tsw) and (is-size($tsw) or array-contains($text-stroke-width-modes, $tsw));
}

/// Text stroke width mixin
///
/// @example scss - Usage
///   .text-stroke-width-element {
///     @include text-stroke-width(2rem);
///   }
///
/// @example css - Output
///   .text-stroke-width {
///     -webkit-text-stroke-width: 2rem;
///     text-stroke-width: 2rem;
///   }
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-text-stroke-width - MDN text-stroke-width docs
/// @access public
/// @param {size | text-stroke-width-mode} $tsw - the text-stroke-width value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin text-stroke-width($tsw, $important: false) {
  @if(is-text-stroke-width($tsw)) {
    @include prefixer(text-stroke-width, $tsw, webkit spec, $important);
  }
  @else {
    @warn '`text-stroke-width: #{$tsw}` is not a valid text-stroke-width value';
  }
}

/// Text stroke color mixin
///
/// @example scss - Usage
///   .text-stroke-color-element {
///     @include text-stroke-color(red);
///   }
///
/// @example css - Output
///   .text-stroke-color {
///     -webkit-text-stroke-color: red;
///     text-stroke-color: red;
///   }
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-text-stroke-color - MDN text-stroke-color docs
/// @param {color} $tsc - the text-stroke-color value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin text-stroke-color($tsc, $important: false) {
  @if(is-text-stroke-color($tsc)) {
    @include prefixer(text-stroke-color, $tsc, webkit spec, $important);
  }
  @else {
    @warn '`text-stroke-color: #{$tsc}` is not a valid text-stroke-color value';
  }
}

/// Text stroke mixin, with fallbacks for older browsers
///
/// @example scss - Usage
///
///   .text-stroke-element {
///     @include text-stroke(2rem red);
///   }
///
/// @example css - Output
///   .text-stroke-element {
///     // if text-stroke is supported
///     -webkit-text-stroke: 2rem red;
///     text-stroke: 2rem red;
///
///     // if text-stroke is not supported
///     -webkit-text-shadow: .1rem .1rem 2rem red, .1rem -.1rem 2rem red, -.1rem .1rem 2rem red, -.1rem -.1rem 2rem red;
///     -moz-text-shadow: .1rem .1rem 2rem red, .1rem -.1rem 2rem red, -.1rem .1rem 2rem red, -.1rem -.1rem 2rem red;
///     -ms-text-shadow: .1rem .1rem 2rem red, .1rem -.1rem 2rem red, -.1rem .1rem 2rem red, -.1rem -.1rem 2rem red;
///     -o-text-shadow: .1rem .1rem 2rem red, .1rem -.1rem 2rem red, -.1rem .1rem 2rem red, -.1rem -.1rem 2rem red;
///     text-shadow: .1rem .1rem 2rem red, .1rem -.1rem 2rem red, -.1rem .1rem 2rem red, -.1rem -.1rem 2rem red;
///   }
/// @requires {function} extend
/// @requires {function} is-defined
/// @requires {function} is-object
/// @requires {function} nth-value
/// @access public
/// @param {object | map} $options - the options
/// @param {size | text-stroke-width-mode} $options.width [1rem] - the text-stroke-width value
/// @param {color} $options.color [#fff] - the text-stroke-color value
/// @param {boolean} $important [false] - if true, will render the important rule
@mixin text-stroke($options, $important: false) {
  $settings: (width: 1rem, color: #fff);

  @if is-object($options) {
    $settings: extend($settings, $options);
  }
  @else {
    $width: nth-value($options, 1);

    @if is-defined($width) {
      $settings: extend($settings, (width: $width));
    }

    $color: nth-value($options, 6);

    @if is-defined($color) {
      $settings: extend($settings, (color: $color));
    }
  }

  $text-stroke-width: map-get($settings, width);
  $text-stroke-color: map-get($settings, color);

  @if is-defined($text-stroke-width) and is-defined($text-stroke-color) {
    @supports ((text-stroke-width: $text-stroke-width) and (text-stroke-color: $text-stroke-color)) or ((-webkit-text-stroke-width: $text-stroke-width) and (-webkit-text-stroke-color: $text-stroke-color)) {
      @include text-stroke-width($text-stroke-width, $important);
      @include text-stroke-color($text-stroke-color, $important);
    }

    @supports (not (((text-stroke-width: $text-stroke-width) and (text-stroke-color: $text-stroke-color)) or ((-webkit-text-stroke-width: $text-stroke-width) and (-webkit-text-stroke-color: $text-stroke-color)))) {
      @include text-shadow(.1rem .1rem $text-stroke-width $text-stroke-color, .1rem -.1rem  $text-stroke-width $text-stroke-color, -.1rem .1rem  $text-stroke-width $text-stroke-color, -.1rem -.1rem  $text-stroke-width $text-stroke-color);
    }
  }
}

/// Ellipsis mixin
/// <br>useful to ellipse text containers also in multiline mode
///
/// @example scss - Usage - single line
///   .ellipsis-element {
///     @include ellipsis;
///   }
///
/// @example css - Output - single line
///   .ellipsis-element {
///     display: inline-block;
///     white-space: nowrap;
///     word-wrap: normal;
///     max-width: 100%;
///     overflow: hidden;
///     text-overflow: ellipsis;
///   }
///
/// @example scss - Usage - multi line
///   .ellipsis-element {
///     @include ellipsis(true);
///   }
///
/// @example css - Output - multi line
///   .ellipsis-element {
///     display: block;
///     display: -webkit-box;
///     margin: 0 auto;
///     font-size: 10px;
///     line-height: 1.5;
///     max-width: 100%;
///     height: 45px;
///     min-height: 45px;
///     -webkit-line-clamp: 3;
///     -webkit-box-orient: vertical;
///     overflow: hidden;
///     text-overflow: ellipsis;
///   }
/// @access public
/// @param {boolean} $multiline [false] - the multiline mode
/// @param {size | length | percentage} $width [100%] - the width to use
/// @param {size | length | percentage} $font-size [$font-size-base] - the font-size
/// @param {size | length | percentage} $line-height [$line-height-base] - the line-height
/// @param {integer} $lines-to-show [3] - the lines to show before ellipsis
/// @param {string} $text-overflow [ellipsis] - the text to use for overflowing
@mixin ellipsis($multiline: false, $width: 100%, $font-size: $font-size-base, $line-height: $line-height-base, $lines-to-show: 3, $text-overflow: ellipsis) {
  @if $multiline {
    $max-width: $width;
    $height: $line-height * $lines-to-show; // fallback for non-webkit
    $min-height: $height; // fallback for non-webkit

    @include margin(0 auto);
    @include font($font-size $line-height);

    @supports (display: -webkit-box) and (-webkit-line-clamp: $lines-to-show) and (-webkit-box-orient: vertical) {
      display: -webkit-box;
      -webkit-line-clamp: $lines-to-show;
      -webkit-box-orient: vertical;

      @include box-size(null null null null $max-width);
    }

    @supports (not ((display: -webkit-box) and (-webkit-line-clamp: $lines-to-show) and (-webkit-box-orient: vertical))) {
      @include display(block); // fallback for non-webkit
      @include box-size(null $height null $min-height $max-width);
    }
  }
  @else {
    @include display(inline-block);
    @include box-bounds(null null $width null);
    @include white-space(nowrap);
    @include word-wrap(normal);
  }

  @include overflow(hidden);
  @include text-overflow($text-overflow);
}
