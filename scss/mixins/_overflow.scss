@charset 'UTF-8';

////
/// Flavor SCSS Mixins Overflow
/// @group mixins-overflow
/// @author blackmirror1980
////

/// Overflow modes
///
/// @access private
/// @type list
$overflow-modes: array-concat((visible, hidden, scroll, overlay, unset, auto), $css-default-modes);

/// Checks if something is a supported overflow mode
///
/// @access public
/// @param {string} $o - the overflow mode
/// @return {boolean}
@function is-overflow-mode($o) {
  @return is-defined($o) and array-contains($overflow-modes, $o);
}

/// Overflow mixin
///
/// @example scss - Usage
///   .overflow-element {
///     @include overflow(hidden);
///   }
///
/// @example css - Output
///   .overflow-element {
///     overflow-x: hidden;
///     overflow-y: hidden;
///   }
///
/// @example scss - Usage
///   .overflow-element {
///     @include overflow(hidden scroll);
///   }
///
/// @example css - Output
///   .overflow-element {
///     overflow-x: hidden;
///     overflow-y: scroll;
///   }
/// @requires {function} nth-value
/// @access public
/// @param {string} $o - the overflow mode
@mixin overflow($o) {
  $overflow-x: nth-value($o, 1);

  @if is-overflow-mode($overflow-x) {
    overflow-x: $overflow-x;
  }
  @else {
    @warn '`overflow-x: #{$o}` is not a valid overflow value';
  }

  $overflow-y: nth-value($o, 2, $overflow-x);

  @if is-overflow-mode($overflow-y) {
    overflow-y: $overflow-y;
  }
  @else {
    @warn '`overflow-y: #{$o}` is not a valid overflow value';
  }
}
