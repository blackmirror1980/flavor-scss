  $border-styles: array-concat((none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset), $css-default-modes);

@function is-border-style($bs) {
  @return array-contains($border-styles, $bs);
}

@function is-border-radius-value($brv) {
  @return is-defined($brv) and (is-size($brv) or is-percentage($brv) or array-contains($css-default-modes, $brv));
}

// TODO: manage fractions (e.g. 2em 1em 4em / 0.5em 0.2em)
@mixin border-radius($br: 0) {
  $border-top-left-radius: if(length($br) > 0, nth($br, 1), 0);

  @if is-defined($border-top-left-radius) {
    @if is-border-radius-value($border-top-left-radius) {
      @include prefixer(border-top-left-radius, $border-top-left-radius);
    }
    @else {
      @warn '`border-top-left-radius: #{$border-top-left-radius}` is not a valid radius value';
    }
  }

  $border-top-right-radius: if(length($br) > 1, nth($br, 2), $border-top-left-radius);

  @if is-defined($border-top-right-radius) {
    @if is-border-radius-value($border-top-right-radius) {
      @include prefixer(border-top-right-radius, $border-top-right-radius);
    }
    @else {
      @warn '`border-top-right-radius: #{$border-top-right-radius}` is not a valid radius value';
    }
  }

  $border-bottom-right-radius: if(length($br) > 2, nth($br, 3), $border-top-left-radius);

  @if is-defined($border-bottom-right-radius) {
    @if is-border-radius-value($border-bottom-right-radius) {
      @include prefixer(border-bottom-right-radius, $border-bottom-right-radius);
    }
    @else {
      @warn '`border-bottom-right-radius: #{$border-bottom-right-radius}` is not a valid radius value';
    }
  }
  $border-bottom-left-radius: if(length($br) > 3, nth($br, 4), $border-top-right-radius);

  @if is-defined($border-bottom-left-radius) {
    @if is-border-radius-value($border-bottom-left-radius) {
      @include prefixer(border-bottom-left-radius, $border-bottom-left-radius);
    }
    @else {
      @warn '`border-bottom-left-radius: #{$border-bottom-left-radius}` is not a valid radius value';
    }
  }
}

$border-modes: array-concat((none), $css-default-modes);

@function is-border-mode($b) {
  @return is-defined($b) and array-contains($border-modes, $b);
}

@mixin border($options, $border-selector: border) {
  @if is-border-mode($options) {
    #{$border-selector}: $options;
  }
  @else {
    $settings: (size: 0, style: solid, color: transparent, radius: null);

    @if is-object($options) {
      $settings: extend($settings, $options);
    }
    @else {
      $size: if(length($options) > 0, nth($options, 1), null);

      @if is-defined($size) {
        $settings: map-merge($settings, (size: $size));
      }

      $style: if(length($options) > 1, nth($options, 2), null);

      @if is-defined($style) {
        $settings: map-merge($settings, (style: $style));
      }

      $color: if(length($options) > 2, nth($options, 3), null);

      @if is-defined($color) {
        $settings: map-merge($settings, (color: $color));
      }

      $radius: if(length($options) > 3, nth($options, 4), null);

      @if is-defined($radius) {
        $settings: map-merge($settings, (radius: $radius));
      }
    }

    $border: ();

    $border-width: map-get($settings, size);

    @if is-size($border-width) {
      $border: append($border, $border-width);
    }
    @else {
      @warn '`border-width: #{$border-width}` is not a valid size';
    }

    $border-style: map-get($settings, style);

    @if is-border-style($border-style) {
      $border: append($border, $border-style);
    }
    @else {
      @warn '`border-style: #{$border-style}` is not a valid border-style value';
    }

    $border-color: map-get($settings, color);
    @if is-css-color($border-color) {
      $border: append($border, $border-color);
    }
    @else {
      @warn '`border-color: #{$border-color}` is not a valid css color';
    }

    #{$border-selector}: $border;

    $border-radius: map-get($settings, radius);

    @if is-defined($border-radius) {
      @include border-radius($border-radius);
    }
  }
}

@mixin border-top($options) {
  @include border($options, border-top);
}

@mixin border-right($options) {
  @include border($options, border-right);
}

@mixin border-bottom($options) {
  @include border($options, border-bottom);
}

@mixin border-left($options) {
  @include border($options, border-left);
}
