$background-image-modes: array-append((none), $css-default-modes);

@function is-background-image($bi) {
  @return contains($background-image-modes, $bi) or is-url($bi);
}

$background-position-horizontal-modes: (left, center, right);
$background-position-vertical-modes: (top, center, bottom);
$background-position-modes: array-append((left, center, right, top, bottom), $css-default-modes);

@function is-background-position($bp) {
  @if is-array($bp) {
    $h: if(length($bp) > 0, nth($bp, 1), null);
    $h-valid: is-css-size($h) or contains($background-position-horizontal-modes, $h);

    $v: if(length($bp) > 1, nth($bp, 2), null);
    $v-valid: is-css-size($v) or contains($background-position-vertical-modes, $v);

    @return $h-valid and $v-valid;
  }

  @return is-css-size($bp) or contains($background-position-modes, $bp);
}

$background-size-modes: array-append((auto, cover, contain), $css-default-modes);

@function is-background-size($bs) {
  @if is-array($bs) {
    $w: if(length($bs) > 0, nth($bs, 1), null);
    $h: if(length($bs) > 1, nth($bs, 2), null);

    @if is-css-size($w) and is-css-size($h) {
      @return true;
    }
  }

  @return is-css-size($bs) or contains($background-size-modes, $bs);
}

$background-repeat-modes: array-append((repeat, repeat-x, repeat-y, no-repeat), $css-default-modes);

@function is-background-repeat($br) {
  @return contains($background-repeat-modes, $br);
}

$background-origin-clip-modes: array-append((border-box, padding-box, content-box), $css-default-modes);

@function is-background-origin-clip($bc) {
  @return contains($background-origin-clip-modes, $bc);
}

$background-attachment-modes: array-append((scroll, fixed, local), $css-default-modes);

@function is-background-attachment($ba) {
  @return contains($background-attachment-modes, $ba);
}

@mixin background($options, $shorthand: false) {
  @if is-css-default($options) {
    background: $options;
  } @else {
    $settings: (
      color: transparent,
      image: none,
      position: 0 0,
      size: auto,
      repeat: repeat,
      origin: padding-box,
      clip: border-box,
      attachment: scroll,
    );

    @if is-object($options) {
      $settings: extend($settings, $options);
    } @else {
      $color: if(length($options) > 0, nth($options, 1), null);

      @if is-defined($color) {
        $settings: map-merge($settings, (color: $color));
      }

      $image: if(length($options) > 1, nth($options, 2), null);

      @if is-defined($image) {
        $settings: map-merge($settings, (image: $image));
      }

      $position: if(length($options) > 2, nth($options, 3), null);

      @if is-defined($position) {
        $settings: map-merge($settings, (position: $position));
      }

      $size: if(length($options) > 3, nth($options, 4), null);

      @if is-defined($size) {
        $settings: map-merge($settings, (size: $size));
      }

      $repeat: if(length($options) > 4, nth($options, 5), null);

      @if is-defined($repeat) {
        $settings: map-merge($settings, (repeat: $repeat));
      }

      $origin: if(length($options) > 5, nth($options, 6), null);

      @if is-defined($origin) {
        $settings: map-merge($settings, (origin: $origin));
      }

      $clip: if(length($options) > 6, nth($options, 7), null);

      @if is-defined($clip) {
        $settings: map-merge($settings, (clip: $clip));
      }

      $attachment: if(length($options) > 7, nth($options, 8), null);

      @if is-defined($attachment) {
        $settings: map-merge($settings, (attachment: $attachment));
      }
    }

    $background: ();

    $background-color: map-get($settings, color);

    @if is-css-color($background-color) {
      @if $shorthand == true {
        $background: append($background, $background-color);
      } @else {
        background-color: $background-color;
      }
    } @else {
      @warn '`background-color: #{$background-color}` is not a valid css color';
    }

    $background-image: map-get($settings, image);

    @if is-background-image($background-image) {
      $background-image: inspect-url($background-image);

      @if $shorthand == true {
        $background: append($background, $background-image);
      } @else {
        background-image: $background-image;
      }
    } @else {
      @warn '`background-image: #{$background-image}` is not a valid background-image value';
    }

    $background-position: map-get($settings, position);
    $background-size: map-get($settings, size);

    @if is-background-position($background-position) and is-background-size($background-size) {
      @if $shorthand == true {
        $background: append($background, $background-position + '/' + $background-size);
      } @else {
        background-position: $background-position;
        background-size: $background-size;
      }
    } @else {
      @warn '`background-position: #{$background-position}` is not a valid background-position value';
      @warn '`background-size: #{$background-size}` is not a valid background-size value';
    }

    $background-repeat: map-get($settings, repeat);

    @if is-background-repeat($background-repeat) {
      @if $shorthand == true {
        $background: append($background, $background-repeat);
      } @else {
        background-repeat: $background-repeat;
      }
    } @else {
      @warn '`background-repeat: #{$background-repeat}` is not a valid background-repeat value';
    }

    $background-origin: map-get($settings, origin);

    @if is-background-origin-clip($background-origin) {
      @if $shorthand == true {
        $background: append($background, $background-origin);
      } @else {
        background-origin: $background-origin;
      }
    } @else {
      @warn '`background-origin: #{$background-origin}` is not a valid background-origin value';
    }

    $background-clip: map-get($settings, clip);

    @if is-background-origin-clip($background-clip) {
      @if $shorthand == true {
        $background: append($background, $background-clip);
      } @else {
        background-clip: $background-clip;
      }
    } @else {
      @warn '`background-clip: #{$background-clip}` is not a valid background-clip value';
    }

    $background-attachment: map-get($settings, attachment);

    @if is-background-attachment($background-attachment) {
      @if $shorthand == true {
        $background: append($background, $background-attachment);
      } @else {
        background-attachment: $background-attachment;
      }
    } @else {
      @warn '`background-attachment: #{$background-attachment}` is not a valid background-attachment value';
    }

    @if $shorthand == true {
      background: $background;
    }
  }
}
