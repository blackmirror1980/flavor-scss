@charset 'UTF-8';

////
/// Flavor SCSS Mixins Background
/// @group mixins-background
/// @author blackmirror1980
////

/// Background image modes
///
/// @type list
/// @access private
$background-image-modes: array-concat((none), $css-default-modes);

/// Checks if something is background image (url, none, initial, inherit)
///
/// @access public
/// @param {string} $bi - the background image
/// @return {boolean}
@function is-background-image($bi) {
  @return is-url($bi) or array-contains($background-image-modes, $bi);
}

/// Background position horizontal modes
///
/// @type list
/// @access private
$background-position-horizontal-modes: array-concat((left, center, right), $css-default-modes);

/// Background position vertical modes
///
/// @type list
/// @access private
$background-position-vertical-modes: array-concat((top, center, bottom), $css-default-modes);

/// Checks if something is a background position value
///
/// @access public
/// @param {string | array} $bp - the background position value/values
/// @link https://www.w3schools.com/cssref/pr_background-position.asp W3Schools background-position docs
/// @requires {function} nth-value
/// @requires {function} is-size
/// @requires {function} is-percentage
/// @requires {function} array-contains
/// @requires {variable} background-position-horizontal-modes
/// @requires {variable} background-position-vertical-modes
/// @return {boolean}
@function is-background-position($bp) {
  @if is-defined($bp) {
    @if is-array($bp) {
      $h: nth-value($bp, 1);
      $h-valid: is-size($h) or is-percentage($h) or array-contains($background-position-horizontal-modes, $h);

      $v: nth-value($bp, 2);
      $v-valid: is-size($v) or is-percentage($v) or array-contains($background-position-vertical-modes, $v);

      @return $h-valid and $v-valid;
    }

    @return is-size($bp) or is-percentage($bp) or array-contains($background-position-horizontal-modes, $bp) or array-contains($background-position-vertical-modes, $bp);
  }

  @return false;
}

/// Background size modes
///
/// @type list
/// @access private
$background-size-modes: array-concat((auto, cover, contain), $css-default-modes);

/// Checks if something is a background size value
///
/// @access public
/// @param {string | array} $bs - the background size value/values
/// @link https://www.w3schools.com/cssref/css3_pr_background-size.asp W3Schools background-size docs
/// @requires {function} nth-value
/// @return {boolean}
@function is-background-size($bs) {
  @if is-defined($bs) {
    @if is-array($bs) {
      $w: nth-value($bs, 1);
      $h: nth-value($bs, 2);

      @if (is-size($w) or is-percentage($w)) and (is-size($h) and is-percentage($h)) {
        @return true;
      }
    }

    @return is-size($bs) or is-percentage($bs) or array-contains($background-size-modes, $bs);
  }

  @return false;
}

/// Background repeat modes
///
/// @type list
/// @access private
$background-repeat-modes: array-concat((repeat, repeat-x, repeat-y, no-repeat), $css-default-modes);

/// Checks if something is a background repeat value
///
/// @access public
/// @param {string} $br - the background repeat value
/// @link https://www.w3schools.com/cssref/pr_background-repeat.asp W3Schools background-repeat docs
/// @return {boolean}
@function is-background-repeat($br) {
  @return is-defined($br) and array-contains($background-repeat-modes, $br);
}

/// Background origin and background clip modes
///
/// @type list
/// @access private
$background-origin-clip-modes: array-concat((border-box, padding-box, content-box), $css-default-modes);


/// Checks if something is a background origin/clip mode
///
/// @access public
/// @param {string} $boc - the background origin/clip value
/// @link https://www.w3schools.com/cssref/css3_pr_background-clip.asp W3Schools background-clip docs
/// @link https://www.w3schools.com/cssref/css3_pr_background-origin.asp W3Schools background-origin docs
/// @return {boolean}
@function is-background-origin-clip($boc) {
  @return is-defined($boc) and array-contains($background-origin-clip-modes, $boc);
}

/// Background attachment modes
///
/// @type list
/// @access private
$background-attachment-modes: array-concat((scroll, fixed, local), $css-default-modes);

/// Checks if something is a background attachment mode
///
/// @access public
/// @param {string} $ba - the background attachment value
/// @link https://www.w3schools.com/cssref/pr_background-attachment.asp W3Schools background-attachment docs
/// @return {boolean}
@function is-background-attachment($ba) {
  @return array-contains($background-attachment-modes, $ba);
}

/// Background mixin
///
/// @access public
/// @param {object | map} $options - the background options
/// @param {color} $options.color [transparent] - background color
/// @param {image} $options.image [none] - background image
/// @param {string | array} $options.position [0 0] - background position
/// @param {string} $options.size [auto] - background size
/// @param {string} $options.repeat [repeat] - background repeat
/// @param {string} $options.origin [padding-box] - background origin
/// @param {string} $options.clip [border-box] - background clip
/// @param {string} $options.attachment [scroll] - background attachment
/// @param {boolean} $shorthand [false] - specifies if shorthand selector will be used or not
/// @requires {function} extend
/// @requires {function} is-defined
/// @requires {function} is-background-origin-clip
/// @requires {function} nth-value
/// @example scss - Usage
///   .background-element {
///     @include background(null url('http://test.com/image.png') null cover no-repeat null null fixed);
///   }
///
/// @example css - Output
///   .background-element {
///     background-color: transparent;
///     background-image: url('http://test.com/image.png');
///     background-position: 0 0;
///     background-size: cover;
///     background-repeat: no-repeat;
///     background-origin: padding-box;
///     background-clip: border-box;
///     background-attachment: fixed;
///   }
/// @example scss - Usage Shorthand
///   .background-element {
///     @include background((
///       image: url('http://test.com/image.png'),
///       size: cover,
///       repeat: no-repeat,
///       attachment: fixed
///     ), true);
///   }
///
/// @example css - Output Shorthand
///   .background-element {
///     background: transparent url('http://test.com/image.png') 0 0/cover no-repeat padding-box border-box fixed;
///   }
@mixin background($options, $shorthand: false) {
  @if is-css-default($options) {
    background: $options;
  }
  @else {
    $settings: (color: transparent, image: none, position: 0 0, size: auto, repeat: repeat, origin: padding-box, clip: border-box, attachment: scroll);

    @if is-object($options) {
      $settings: extend($settings, $options);
    }
    @else {
      $color: nth-value($options, 1);

      @if is-defined($color) {
        $settings: extend($settings, (color: $color));
      }

      $image: nth-value($options, 2);

      @if is-defined($image) {
        $settings: extend($settings, (image: $image));
      }

      $position: nth-value($options, 3);

      @if is-defined($position) {
        $settings: extend($settings, (position: $position));
      }

      $size: nth-value($options, 4);

      @if is-defined($size) {
        $settings: extend($settings, (size: $size));
      }

      $repeat: nth-value($options, 5);

      @if is-defined($repeat) {
        $settings: extend($settings, (repeat: $repeat));
      }

      $origin: nth-value($options, 6);

      @if is-defined($origin) {
        $settings: extend($settings, (origin: $origin));
      }

      $clip: nth-value($options, 7);

      @if is-defined($clip) {
        $settings: extend($settings, (clip: $clip));
      }

      $attachment: nth-value($options, 8);

      @if is-defined($attachment) {
        $settings: extend($settings, (attachment: $attachment));
      }
    }

    $background: ();

    $background-color: map-get($settings, color);

    @if is-css-color($background-color) {
      @if $shorthand==true {
        $background: append($background, $background-color);
      }
      @else {
        background-color: $background-color;
      }
    }
    @else {
      @warn '`background-color: #{$background-color}` is not a valid css color';
    }

    $background-image: map-get($settings, image);

    @if is-background-image($background-image) {
      $background-image: inspect-url($background-image);

      @if $shorthand==true {
        $background: append($background, $background-image);
      }
      @else {
        background-image: $background-image;
      }
    }
    @else {
      @warn '`background-image: #{$background-image}` is not a valid background-image value';
    }

    $background-position: map-get($settings, position);
    $background-size: map-get($settings, size);

    @if is-background-position($background-position) and is-background-size($background-size) {
      @if $shorthand==true {
        $background: append($background, $background-position + '/' + $background-size);
      }
      @else {
        background-position: $background-position;
        background-size: $background-size;
      }
    }
    @else {
      @warn '`background-position: #{$background-position}` is not a valid background-position value';
      @warn '`background-size: #{$background-size}` is not a valid background-size value';
    }

    $background-repeat: map-get($settings, repeat);

    @if is-background-repeat($background-repeat) {
      @if $shorthand==true {
        $background: append($background, $background-repeat);
      }
      @else {
        background-repeat: $background-repeat;
      }
    }
    @else {
      @warn '`background-repeat: #{$background-repeat}` is not a valid background-repeat value';
    }

    $background-origin: map-get($settings, origin);

    @if is-background-origin-clip($background-origin) {
      @if $shorthand==true {
        $background: append($background, $background-origin);
      }
      @else {
        background-origin: $background-origin;
      }
    }
    @else {
      @warn '`background-origin: #{$background-origin}` is not a valid background-origin value';
    }

    $background-clip: map-get($settings, clip);

    @if is-background-origin-clip($background-clip) {
      @if $shorthand==true {
        $background: append($background, $background-clip);
      }
      @else {
        background-clip: $background-clip;
      }
    }
    @else {
      @warn '`background-clip: #{$background-clip}` is not a valid background-clip value';
    }

    $background-attachment: map-get($settings, attachment);

    @if is-background-attachment($background-attachment) {
      @if $shorthand==true {
        $background: append($background, $background-attachment);
      }
      @else {
        background-attachment: $background-attachment;
      }
    }
    @else {
      @warn '`background-attachment: #{$background-attachment}` is not a valid background-attachment value';
    }

    @if $shorthand==true {
      background: $background;
    }
  }
}
