@charset 'UTF-8';

////
/// Flavor SCSS Mixins Utils
/// @group mixins-utils
/// @author blackmirror1980
////

/// Convert pixels to rems
/// <br>eg. for a relational value of 12px write rem(12)
/// <br>Assumes $base is the font-size of <html>
///
/// @access public
/// @param {size} $px - pixels size you want to convert
/// @param {size} $base [$font-size-base] - html font-size base
/// @return {size}
@function rem($px, $base: $font-size-base) {
  @if not unitless($px) {
    $px: strip-units($px);
  }

  @if not unitless($base) {
    $base: strip-units($base);
  }

  @return ($px / $base) * 1rem;
}

$prefixes-available: (webkit, moz, ms, o, spec);

@function is-prefix-available($p) {
  @return is-defined($p) and array-contains($prefixes-available, $p);
}

/// Prefixer mixin
/// <br>for generating vendor prefixes on non-standardized properties.
///
/// @example scss - Usage
///   .element {
///     @include prefixer(border-radius, 10px, webkit ms spec);
///   }
///
/// @example css - Output
///   .element {
///     -webkit-border-radius: 10px;
///     -moz-border-radius: 10px;
///     border-radius: 10px;
///   }
/// @param {string} $property - the property to prefix
/// @param {any} $values - the values list to use
/// @param {array | list} $prefixes - space separated list
@mixin prefixer($property, $values, $prefixes: webkit moz ms o spec) {
  $prefix-selector: '';

  @each $prefix in $prefixes {
    @if is-prefix-available($prefix) {
      $prefix-selector: if($prefix != spec, '-#{$prefix}-', '');

      #{$prefix-selector}#{$property}: $values;
    }
    @else {
      @warn 'Unrecognized prefix: #{$prefix}';
    }
  }
}

@mixin outline($outline) {
  outline: $outline;

  &:active,
  &:focus {
    outline: $outline;
  }
}

@mixin overflow-hidden-animated {
  @include backface-visibility(hidden);
  @include transform(translate3d(0, 0, 0), webkit moz);
  @include overflow(hidden);
}

@mixin disable {
  @include cursor(default);
  @include pointer-events(none);

  * {
    @include cursor(default);
    @include pointer-events(none);
  }
}

@mixin hidden {
  @include position(absolute);
  @include box-size(1px);
  @include padding(0);
  @include border(0);
  @include overflow(hidden);
  @include white-space(nowrap);

  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(100%);
}

@mixin opacity($o) {
  // fallbacks for ie old browsers
  filter: alpha(opacity=(#{$o * 100}));
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$o * 100})";

  @include prefixer(opacity, $o);
}

@mixin force-cursor($c) {
  @include cursor($c);

  * {
    @include cursor($c);

    &:before {
      @include cursor($c);
    }
  }
}
