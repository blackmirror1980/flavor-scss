@charset 'UTF-8';

////
/// Flavor SCSS Mixins Box
/// @group mixins-box
/// @author blackmirror1980
////

/// Reset inline-block mixin (useful to fix those annoying auto margins between inline-block children elements
///
/// @access public
@mixin reset-inline-block {
  letter-spacing: -.3em;
  line-height: 0;
  text-rendering: optimizeSpeed;

  * {
    letter-spacing: initial;
    line-height: initial;
  }
}

/// Display modes
///
/// @type list
/// @access private
$display-modes: array-concat((none, inline, block, inline-block, flex, inline-flex, table, inline-table, table-caption, table-header-group, table-row-group, table-column-group, table-footer-group, table-row, table-column, table-cell, list-item, run-in), $css-default-modes);

/// Checks if something is a correct display mode value
///
/// @access public
/// @param {string} $dm - the display mode
/// @return {boolean}
@function is-display-mode($dm) {
  @return is-defined($dm) and array-contains($display-modes, $dm);
}

/// Display mixin
///
/// @access public
/// @param {string} $dm - the display mode
/// @param {string} $auto-reset-inline-block [false] - the display mode
/// @example scss - Usage
///   .display-element {
///     @include display(block);
///   }
///
/// @example css - Output
///   .display-element {
///     display: block;
///   }
///
/// @example scss - Usage inline-block
///   .display-element {
///     @include display(inline-block);
///   }
///
/// @example css - Output inline-block
///   .display-element {
///     display: inline-block;
///   }
///
/// @example scss - Usage inline-block with auto reset
///   .display-element {
///     @include display(inline-block, true);
///   }
///
/// @example css - Output inline-block with auto reset
///   .display-element {
///     display: inline-block;
///     letter-spacing: -.3em;
///     line-height: 0;
///     text-rendering: optimizeSpeed;
///
///     * {
///       letter-spacing: initial;
///       line-height: initial;
///     }
///   }
@mixin display($dm, $auto-reset-inline-block: false) {
  @if is-display-mode($dm) {
    display: $dm;

    @if $dm==inline-block and $auto-reset-inline-block==true {
      @include reset-inline-block;
    }
  }
  @else {
    @warn '`display: #{$dm}` is not a valid display mode';
  }
}

/// Box sizing modes
///
/// @type list
/// @access private
$box-sizing-modes: array-concat((content-box, border-box), $css-default-modes);

/// Checks if something is box sizing mode
///
/// @access public
/// @param {string} $bs - the box sizing mode
/// @return {boolean}
@function is-box-sizing-mode($bs) {
  @return is-defined($bs) and array-contains($box-sizing-modes, $bs);
}

/// Box sizing mixin
///
/// @access public
/// @param {string} $bs - the box sizing mode
/// @example scss - Usage
///   .box-sizing-element {
///     @include box-sizing(content-box);
///   }
///
/// @example css - Output
///   .box-sizing-element {
///     box-sizing: content-box;
///   }
@mixin box-sizing($bs) {
  @if is-box-sizing-mode($bs) {
    box-sizing: $bs;
  }
  @else {
    @warn '`box-sizing: #{$bs}` is not a valid box-sizing mode';
  }
}

/// Box size modes
///
/// @type list
/// @access private
$box-size-modes: array-concat((auto), $css-default-modes);

/// Checks if something is box size
///
/// @access public
/// @param {size | string} $s - the box size
/// @return {boolean}
@function is-box-size($s) {
  @return is-defined($s) and (is-size($s) or array-contains($box-size-modes, $s));
}

/// Box bound size modes
///
/// @type list
/// @access private
$box-bound-size-modes: array-concat((none), $css-default-modes);

/// Checks if something is box bound size
///
/// @access public
/// @param {size | string} $s - the box size
/// @return {boolean}
@function is-box-bound-size($s) {
  @return is-defined($s) and (is-size($s) or array-contains($box-bound-size-modes, $s));
}

/// Box bounds mixin
/// <br>useful to set min/max width & height in one shot
///
/// @access public
/// @param {object | map} $options - the bounds options
/// @param {size | percentage} $options.min-width [null] - the min width bound
/// @param {size | percentage} $options.min-height [null] - the min height bound
/// @param {size | percentage} $options.max-width [null] - the max width bound
/// @param {size | percentage} $options.max-height [null] - the max height bound
/// @requires {function} extend
/// @requires {function} is-defined
/// @requires {function} nth-value
/// @example scss - Usage
///   .bounds-element {
///     @include box-bounds(10% null null 610px);
///   }
///
/// @example css - Output
///   .bounds-element {
///     min-width: 10%;
///     max-height: 610px
///   }
@mixin box-bounds($options) {
  $settings: (min-width: null, min-height: null, max-width: null, max-height: null);

  @if is-object($options) {
    $settings: extend($settings, $options);
  }
  @else {
    $min-width: nth-value($options, 1);

    @if is-defined($min-width) {
      $settings: extend($settings, (min-width: $min-width));
    }

    $min-height: nth-value($options, 2);

    @if is-defined($min-height) {
      $settings: extend($settings, (min-height: $min-height));
    }

    $max-width: nth-value($options, 3);

    @if is-defined($max-width) {
      $settings: extend($settings, (max-width: $max-width));
    }

    $max-height: nth-value($options, 3);

    @if is-defined($max-height) {
      $settings: extend($settings, (max-height: $max-height));
    }
  }

  $min-width: map-get($settings, min-width);

  @if is-defined($min-width) {
    @if is-box-bound-size($min-width) {
      min-width: $min-width;
    }
    @else {
      @warn '`min-width: #{$min-width}` is not a valid size';
    }
  }

  $min-height: map-get($settings, min-height);

  @if is-defined($min-height) {
    @if is-box-bound-size($min-height) {
      min-height: $min-height;
    }
    @else {
      @warn '`min-height: #{$min-height}` is not a valid size';
    }
  }

  $max-width: map-get($settings, max-width);

  @if is-defined($max-width) {
    @if is-box-bound-size($max-width) {
      max-width: $max-width;
    }
    @else {
      @warn '`max-width: #{$max-width}` is not a valid size';
    }
  }

  $max-height: map-get($settings, max-height);

  @if is-defined($max-height) {
    @if is-box-bound-size($max-height) {
      max-height: $max-height;
    }
    @else {
      @warn '`max-height: #{$max-height}` is not a valid size';
    }
  }
}

/// Box size mixin
/// <br>used to set size & bounds in one shot
///
/// @access public
/// @param {object | map} $options - the bounds options
/// @param {size | percentage} $options.width [null] - the min width bound
/// @param {size | percentage} $options.height [null] - the min width bound
/// @param {size | percentage} $options.min-width [null] - the min width bound
/// @param {size | percentage} $options.min-height [null] - the min height bound
/// @param {size | percentage} $options.max-width [null] - the max width bound
/// @param {size | percentage} $options.max-height [null] - the max height bound
/// @param {boolean} $height-fallback [true] - falls back the height value to the width value, if height is not specified (useful for square sizes)
/// @requires {function} extend
/// @requires {function} is-defined
/// @requires {function} nth-value
/// @example scss - Usage - height fallback
///   .size-element {
///     @include box-size(100px);
///   }
///
/// @example css - Output - height fallback
///   .size-element {
///     width: 100px;
///     height: 100px;
///   }
///
/// @example scss - Usage - no height fallback
///   .size-element {
///     @include box-size(100px, false);
///   }
///
/// @example css - Output - no height fallback
///   .size-element {
///     width: 100px;
///   }
///
/// @example scss - Usage - height only
///   .size-element {
///     @include box-size(null 250px);
///   }
///
/// @example css - Output - height only
///   .size-element {
///     height: 250px;
///   }
///
/// @example scss - Usage - full usage
///   .size-element {
///     @include box-size(100% auto 30px 0 100% 250px);
///   }
///
/// @example css - Output - full usage
///   .size-element {
///     width: 100%;
///     height: auto;
///     min-width: 30px;
///     min-height: 0;
///     max-width: 100%;
///     max-height: 250px;
///   }
@mixin box-size($options, $height-fallback: true) {
  $settings: (width: null, height: null, min-width: null, min-height: null, max-width: null, max-height: null);

  @if is-object($options) {
    $settings: extend($settings, $options);
  }
  @else {
    $width: nth-value($options, 1);

    @if is-defined($width) {
      $settings: extend($settings, (width: $width));
    }

    $height: nth-value($options, 2);

    @if is-defined($height) {
      $settings: extend($settings, (height: $height));
    }

    $min-width: nth-value($options, 3);

    @if is-defined($min-width) {
      $settings: extend($settings, (min-width: $min-width));
    }

    $min-height: nth-value($options, 4);

    @if is-defined($min-height) {
      $settings: extend($settings, (min-height: $min-height));
    }

    $max-width: nth-value($options, 5);

    @if is-defined($max-width) {
      $settings: extend($settings, (max-width: $max-width));
    }

    $max-height: nth-value($options, 6);

    @if is-defined($max-height) {
      $settings: extend($settings, (max-height: $max-height));
    }
  }

  $width: map-get($settings, width);

  @if is-defined($width) {
    @if is-box-size($width) {
      width: $width;
    }
    @else {
      @warn '`width: #{$width}` is not a valid size';
    }
  }

  $height: map-get($settings, height);

  @if $height-fallback==true and is-defined($width) and not is-defined($height) {
    $height: $width;
  }

  @if is-defined($height) {
    @if is-box-size($height) {
      height: $height;
    }
    @else {
      @warn '`height: #{$height}` is not a valid size';
    }
  }

  $min-width: map-get($settings, min-width);
  $min-height: map-get($settings, min-height);
  $max-width: map-get($settings, max-width);
  $max-height: map-get($settings, max-height);

  @include box-bounds($min-width $min-height $max-width $max-height);
}

/// Box color mixin
/// <br>used to set color & background color in one shot
///
/// @access public
/// @param {object | map} $options - the box color options
/// @param {color} $options.color [inherit] - the color
/// @param {color} $options.bgcolor [inherit] - the background color
/// @requires {function} extend
/// @requires {function} is-defined
/// @requires {function} nth-value
/// @example scss - Usage
///   .color-element {
///     @include box-color(#ffa transparent);
///   }
///
/// @example css - Output
///   .color-element {
///     color: #ffa;
///     background-color: transparent;
///   }
@mixin box-color($options) {
  $settings: (color: inherit, bgcolor: inherit);

  @if is-object($options) {
    $settings: extend($settings, $options);
  }
  @else {
    $color: nth-value($options, 1);

    @if is-defined($color) {
      $settings: extend($settings, (color: $color));
    }

    $bgcolor: nth-value($options, 2);

    @if is-defined($bgcolor) {
      $settings: extend($settings, (bgcolor: $bgcolor));
    }
  }

  $color: map-get($settings, color);

  @if is-css-color($color) {
    color: $color;
  }
  @else {
    @warn '`color: #{$color}` is not a valid css color';
  }

  $bgcolor: map-get($settings, bgcolor);

  @if is-css-color($bgcolor) {
    background-color: $bgcolor;
  }
  @else {
    @warn '`background-color: #{$bgcolor}` is not a valid css color';
  }
}

/// Box shadow mixin
///
/// @access public
/// @param {shadow} $shadows... - the box shadows list
/// @example scss - Usage
///   .shadow-element {
///     @include box-shadow(inset 0 2px 0px #dcffa6, 0 2px 5px #000);
///   }
///
/// @example css - Output
///   .color-element {
///     -webkit-box-shadow: inset 0 2px 0px #dcffa6, 0 2px 5px #000;
///     -moz-box-shadow: inset 0 2px 0px #dcffa6, 0 2px 5px #000;
///     -ms-box-shadow: inset 0 2px 0px #dcffa6, 0 2px 5px #000;
///     -o-box-shadow: inset 0 2px 0px #dcffa6, 0 2px 5px #000;
///     box-shadow: inset 0 2px 0px #dcffa6, 0 2px 5px #000;
///   }
@mixin box-shadow($shadows...) {
  @include prefixer(box-shadow, $shadows);
}

/// Z-index modes
///
/// @type list
/// @access private
$z-index-modes: array-concat((auto), $css-default-modes);

/// Checks if something is z-index value
///
/// @access public
/// @param {integer | string} $zi - the z-index value
/// @return {boolean}
@function is-z-index($zi) {
  @return is-defined($zi) and (is-integer($zi) or array-contains($z-index-modes, $zi));
}

/// Z-index mixin
///
/// @access public
/// @param {integer | string} $zi - the z-index
/// @example scss - Usage
///   .z-index-element {
///     @include z-index(1);
///   }
///
/// @example css - Output
///   .z-index-element {
///     z-index: 1;
///   }
@mixin z-index($zi) {
  @if(is-z-index($zi)) {
    z-index: $zi;
  }
  @else {
    @warn '`z-index: #{$zi}` is not a valid z-index value';
  }
}

/// Visibility modes
///
/// @type list
/// @access private
$visibility-modes: array-concat((visible, hidden, collapse), $css-default-modes);

/// Checks if something is suppoerted visibility mode
///
/// @access public
/// @param {string} $vm - the visibility mode
/// @return {boolean}
@function is-visibility-mode($vm) {
  @return is-defined($vm) and array-contains($visibility-modes, $vm);
}

/// Visibility mixin
///
/// @access public
/// @param {string} $v - the visibility
/// @example scss - Usage
///   .visibility-element {
///     @include visibility(hidden);
///   }
///
/// @example css - Output
///   .visibility-element {
///     visibility: hidden;
///   }
@mixin visibility($v) {
  @if(is-visibility-mode($v)) {
    visibility: $v;
  }
  @else {
    @warn '`visibility: #{$zi}` is not a valid visibility value';
  }
}

/// Backface visibility modes
///
/// @type list
/// @access private
$backface-visibility-modes: array-concat((visible, hidden), $css-default-modes);

/// Checks if something is suppoerted backface-visibility mode
///
/// @access public
/// @param {string} $bv - the backface-visibility mode
/// @return {boolean}
@function is-backface-visibility-mode($bv) {
  @return is-defined($bv) and array-contains($backface-visibility-modes, $bv);
}

/// Backface visibility mixin
///
/// @access public
/// @param {string} $bv - the backface visibility
/// @example scss - Usage
///   .backface-visibility-element {
///     @include backface-visibility(visible);
///   }
///
/// @example css - Output
///   .backface-visibility-element {
///     -webkit-backface-visibility: visible;
///     -moz-backface-visibility: visible;
///     -ms-backface-visibility: visible;
///     -o-backface-visibility: visible;
///     backface-visibility: visible;
///   }
@mixin backface-visibility($bv) {
  @if is-backface-visibility($bv) {
    @include prefixer(backface-visibility, $bv);
  }
  @else {
    @warn '`backface-visibility: #{$bv}` is not a valid backface-visibility value';
  }
}

/// Aspect ratio mixin
///
/// @access public
/// @param {integer | size} $width [1] - desired width for aspect ratio calculation
/// @param {integer | size} $height [1] - desired height for aspect ratio calculation
/// @param {integer | size} $content-selector ['.content'] - desired content selector
/// @example scss - Usage
///   .aspect-ratio-element {
///     @include aspect-ratio(170px, 20px);
///   }
///
/// @example css - Output
///   .aspect-ratio-element {
///     position: relative;
///     display: inline-block; // so you can use text align to align the element
///
///     &:before {
///       display: inline-block;
///       width: 100%;
///       padding-top: 11,764705882352941%; // = 20 / 170 * 100%
///       content: '';
///     }
///
///     > .content {
///       position: absolute;
///       display: inline-block;
///       top: 0;
///       right: 0;
///       bottom: 0;
///       left: 0;
///       width: 100%;
///       height: 100%;
///     }
///   }
@mixin aspect-ratio($width, $height, $content-selector: '.content') {
  @if (unit($height) == unit($width)) {
    @include position(relative);
    @include display(inline-block);

    &:before {
      @include display(inline-block);
      @include box-size(100%, false);
      @include padding(((strip-unit($height) / strip-unit($width)) * 100%) null null null);

      content: '';
    }

    > #{$content-selector} {
      @include position(absolute, 0 0 0 0);
      @include display(inline-block);
      @include box-size(100%);
    }
  }
  @else {
    @warn '`$width: #{$widgh}` and `$height: #{$height}` should have the same measure unit';
  }
}
