$css-default-modes: (initial, inherit);

/// Checks is a value is a default css mode (initial, inherit)
///
/// @param {String} $cd
/// @return {Boolean}
@function is-css-default($cd) {
  @return is-defined($cd) and array-contains($css-default-modes, $cd);
}

@function is-calc-length($cl) {
  @return is-defined($cl) and string-starts-with($cl, 'calc(') and string-ends-with($cl, ')');
}

$length-modes: array-concat((auto), $css-default-modes);

@function is-length-mode($lm) {
  @return is-defined($lm) and array-contains($length-modes, $lm);
}

$relative-length-units: (em, ex, ch, rem, vw, vh, vmin, vmax);

@function is-relative-length($l) {
  @return is-number($l) and not(unitless($l)) and (array-contains($relative-length-units, unit($l)) or is-percentage($l));
}

$absolute-length-units: (cm, mm, in, px, pt, pc);

@function is-absolute-length($l) {
  @return is-number($l) and not(unitless($l)) and array-contains($absolute-length-units, unit($l));
}

/// Checks is a value is a valid CSS length
///
/// @param {String} $l
/// @return {Boolean}
@function is-length($l) {
  @return is-defined($l) and (is-relative-length($l) or is-absolute-length($l) or is-calc-length($l) or is-length-mode($l));
}

$css-size-modes: array-concat((auto, fill, fill-available, available, fit-content, min-content, max-content), $css-default-modes);

/// Checks for a valid CSS size.
///
/// @param {String} $s
/// @return {Boolean}
@function is-size($s) {
  @return is-defined($s) and (is-length($s) or array-contains($css-size-modes, $s));
}

/// Strips the unit from a value.
///
/// @argument {Number} $n
/// @return {Number (unitless)}
/// @example scss
///   $dimension: strip-unit(10em);
///
///   // Output
///   $dimension: 10;
@function strip-unit($value) {
  @return ($value / ($value * 0 + 1));
}
