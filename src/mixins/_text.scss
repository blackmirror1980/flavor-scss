$font-weight-modes: array-append((normal, bold, bolder, lighter, 100, 200, 300, 400, 500, 600, 700, 800, 900), $css-default-modes);

@function is-font-weight($fw) {
  @return contains($font-weight-modes, $fw);
}

$font-modes: array-append((medium, xx-small, x-small, small, large, x-large, xx-large, smaller, larger), $css-default-modes);

@function is-font-size($s) {
  @return is-css-size($s) or contains($font-modes, $s);
}

$line-height-modes: array-append((normal), $css-default-modes);

@function is-line-height($s) {
  @return is-css-size($s) or contains($line-height-modes, $s);
}

@mixin font($options) {
  $settings: (
    size: 1rem,
    height: 1rem,
    color: inherit,
    weight: normal,
    family: null,
  );

  @if is-object($options) {
    $settings: extend($settings, $options);
  } @else {
    $size: if(length($options) > 0, nth($options, 1), null);

    @if is-defined($size) {
      $settings: map-merge($settings, (size: $size));
    }

    $height: if(length($options) > 1, nth($options, 2), null);

    @if is-defined($height) {
      $settings: map-merge($settings, (height: $height));
    }

    $color: if(length($options) > 2, nth($options, 3), null);

    @if is-defined($color) {
      $settings: map-merge($settings, (color: $color));
    }

    $weight: if(length($options) > 3, nth($options, 4), null);

    @if is-defined($weight) {
      $settings: map-merge($settings, (weight: $weight));
    }

    $family: if(length($options) > 4, nth($options, 5), null);

    @if is-defined($family) {
      $settings: map-merge($settings, (family: $family));
    }
  }

  $font-family: map-get($settings, family);

  @if is-string($font-family) {
    font-family: #{$font-family}, Arial, sans-serif;
  }

  $font-size: map-get($settings, size);

  @if is-font-size($font-size) {
    font-size: $font-size;
  } @else {
    @warn "`font-size: #{$font-size}` is not a valid css size";
  }

  $font-color: map-get($settings, color);

  @if is-css-color($font-color) {
    color: $font-color;
  } @else {
    @warn "`color: #{$font-color}` is not a valid css color";
  }

  $font-weight: map-get($settings, weight);

  @if is-font-weight($font-weight) {
    font-weight: $font-weight;
  } @else {
    @warn "`font-weight: #{$font-weight}` is not a valid font-weight";
  }

  $line-height: map-get($settings, height);

  @if is-line-height($line-height) {
    line-height: $line-height;
  } @else {
    @warn "`line-height: #{$line-height}` is not a valid line-height value";
  }
}

@mixin ellipsis($multiline: false, $width: 100%, $font-size: 16px, $line-height: 1.4, $lines-to-show: 3) {
  @if $multiline {
    display: block;
    /* Fallback for non-webkit */
    display: -webkit-box;
    max-width: $width;
    height: $font-size * $line-height * $lines-to-show;
    /* Fallback for non-webkit */
    min-height: $font-size * $line-height * $lines-to-show;
    /* Fallback for non-webkit */
    margin: 0 auto;
    font-size: $font-size;
    line-height: $line-height;
    -webkit-line-clamp: $lines-to-show;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    display: inline-block;
    max-width: $width;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    word-wrap: normal;
  }
}

// Word Wrapping
@mixin word-wrap() {
  -ms-word-break: break-all;
  word-break: break-all;
  word-break: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}

$text-align-modes: array-append((left, center, right, justify), $css-default-modes);

@function is-text-align($ta) {
  @return contains($text-align-modes, $ta);
}

$vertical-align-modes: array-append((baseline, sub, super, top, text-top, middle, bottom, text-bottom), $css-default-modes);

@function is-vertical-align($va) {
  @return is-css-size($va) or contains($vertical-align-modes, $va);
}

@mixin content-align($options) {
  $settings: (
    h: inherit,
    v: inherit,
  );

  @if is-object($options) {
    $settings: extend($settings, $options);
  } @else {
    $h: if(length($options) > 0, nth($options, 1), null);

    @if is-defined($h) {
      $settings: map-merge($settings, (h: $h));
    }

    $v: if(length($options) > 1, nth($options, 2), null);

    @if is-defined($v) {
      $settings: map-merge($settings, (v: $v));
    }
  }

  $h: map-get($settings, h);

  @if is-defined($h) {
    @if is-text-align($h) {
      text-align: $h;
    } @else {
      @warn "`text-align: #{$h}` is not a valid text-align value";
    }
  }

  $v: map-get($settings, v);

  @if is-defined($v) {
    @if is-vertical-align($v) {
      vertical-align: $v;
    } @else {
      @warn "`vertical-align: #{$v}` is not a valid vertical-align value";
    }
  }
}


